[{"path":"story/Atom.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { InputNumber, Space } from '@cn-ui/core';\n\nexport const Controller = [];\nexport default () => {\n    const value = atom(0);\n    const bg = reflect(() => {\n        return `hsl(${value() % 360}deg 61% 31%)`;\n    });\n    return (\n        <Space>\n            <div\n                class=\"h-4 w-4\"\n                style={{\n                    /** make number to hsl color string */\n                    'background-color': bg(),\n                }}\n            ></div>\n            <InputNumber\n                value={\n                    /** make 1 space plus to 12 space */\n                    value.reflux(0, (val) => val * 12)\n                }\n                step={1}\n                min={0}\n            ></InputNumber>\n        </Space>\n    );\n};\n"},{"path":"story/Box.story.tsx","code":"export const Controller = [];\nimport { Image, Result, Box } from '@cn-ui/core';\nexport default (props) => {\n    const baseStyle = { height: '200px', width: '100%' };\n    return (\n        <>\n            <div style={baseStyle}>\n                <Box\n                    class=\"bg-slate-50\"\n                    icon={\n                        <Image\n                            src=\"https://doodleipsum.com/700x525/hand-drawn?i=dee23ea78d4bed889e6b2c07f25f3a13\"\n                            style={{ 'max-width': '70%', 'max-height': '70%', overflow: 'hidden' }}\n                        ></Image>\n                    }\n                    subTitle=\"数据为空\"\n                ></Box>\n            </div>\n            <div style={baseStyle}>\n                <Result\n                    class=\"bg-green-50\"\n                    icon=\"success\"\n                    title=\"数据为空\"\n                    subTitle=\"这是一些描述信息\"\n                ></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result\n                    class=\"bg-blue-50\"\n                    icon=\"loading\"\n                    title=\"加载中\"\n                    subTitle=\"这是一些描述信息\"\n                ></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result\n                    class=\"bg-red-50\"\n                    icon=\"error\"\n                    title=\"数据为空\"\n                    subTitle=\"这是一些描述信息\"\n                ></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result\n                    class=\"bg-blue-50\"\n                    icon=\"info\"\n                    title=\"数据为空\"\n                    subTitle=\"这是一些描述信息\"\n                ></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result\n                    class=\"bg-yellow-50\"\n                    icon=\"warning\"\n                    title=\"数据为空\"\n                    subTitle=\"这是一些描述信息\"\n                ></Result>\n            </div>\n        </>\n    );\n};\n"},{"path":"story/Breadcrumb.story.tsx","code":"export const Controller = [];\n\nimport { atom, reflect } from '@cn-ui/use';\nimport { Breadcrumb } from '@cn-ui/core';\nexport default () => {\n    const value = atom<string[]>(['Header', 'Channel', 'News']);\n    return (\n        <>\n            <Breadcrumb\n                class=\"mx-4 my-4 \"\n                list={value}\n                onTrigger={(arr, text, index) => {\n                    console.log(arr, text, index);\n                }}\n                buttonProps={{ color: 'white' }}\n            ></Breadcrumb>\n        </>\n    );\n};\n"},{"path":"story/Button.story.tsx","code":"import { createSignal } from 'solid-js';\nimport { Button, Gradient, SizeTrans, sleep } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'disabled',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'round',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'square',\n    },\n\n    {\n        type: 'switch',\n        default: false,\n        prop: 'text',\n    },\n\n    {\n        type: 'select',\n        default: 'normal',\n        prop: 'size',\n        options: Object.keys(SizeTrans).map((i) => ({ value: i })),\n    },\n\n    {\n        type: 'select',\n        default: 'blue',\n        prop: 'color',\n        options: Object.keys(Gradient).map((i) => ({\n            value: i,\n        })),\n    },\n];\nexport default (props) => {\n    const [type, setType] = createSignal<'red' | 'green'>('red');\n\n    console.log('刷新组件');\n    return (\n        <div class=\"flex items-center gap-2 p-2\">\n            <Button {...props}>按钮一个</Button>\n            <Button {...props} block>\n                按钮一个\n            </Button>\n            <Button\n                color={type()}\n                onClick={async () => {\n                    return sleep(1000).then(() => {\n                        setType((old) => {\n                            return old === 'green' ? 'red' : 'green';\n                        });\n                    });\n                }}\n            >\n                按钮一个\n            </Button>\n        </div>\n    );\n};\n"},{"path":"story/Card.story.tsx","code":"import { Card } from '@cn-ui/core';\nexport const Controller = [];\nimport './Story.css';\nexport default (props) => {\n    return (\n        <Card\n            className=\"demo-card\"\n            background={\n                <img\n                    class=\"background\"\n                    src=\"https://images.unsplash.com/photo-1614094082869-cd4e4b2905c7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\n                />\n            }\n        >\n            <div class=\"flex h-full w-full flex-col p-4\">\n                <header>中文</header>\n                <div class=\"flex-1\" style={{ 'min-height': '2em' }}></div>\n\n                <footer>中文分解机覅</footer>\n                <nav>极致的描述信息</nav>\n            </div>\n        </Card>\n    );\n};\n"},{"path":"story/Cascader.story.tsx","code":"import { atom } from '@cn-ui/use';\nimport { Breadcrumb, Cascader, Icon, useChinaArea } from '@cn-ui/core';\nexport const Controller = [];\n\nexport default (props) => {\n    const value = atom(['北京市', '北京市', '东城区']);\n    const { options } = useChinaArea(value);\n    return (\n        <>\n            <Breadcrumb\n                class=\"m-4 \"\n                list={value}\n                separator={<Icon name=\"arrow_right_alt\"></Icon>}\n            ></Breadcrumb>\n            <Cascader class=\"m-4 rounded-lg  \" options={options} value={value}></Cascader>\n        </>\n    );\n};\n"},{"path":"story/CheckBox.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { Message, CheckBox, CheckGroup, Button, CheckGroupHelper } from '@cn-ui/core';\nimport { For } from 'solid-js';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: true,\n        prop: 'multi',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'disabled',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'indeterminate',\n    },\n];\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\n\nexport default (props) => {\n    const checkbox = atom(true);\n    const groupController = ['用户', '姓名', '操作'].map((i) => {\n        return { value: atom(false), disabled: props.disabled, children: i };\n    });\n    // const { inverse } = useCheckGroup(groupController);\n    const selectedIds = atom<string[]>([]);\n    return (\n        <>\n            <CheckGroup activeIds={selectedIds}>\n                <CheckBox label=\"同步更新\" value={checkbox} {...props}></CheckBox>\n                <CheckBox\n                    label=\"异步更新\"\n                    value={checkbox}\n                    onValueInput={async () => {\n                        console.log('请等待 1000s');\n                        const c = Message.loading('加载中');\n                        await sleep(1000);\n                        c();\n                        Message.success('成功');\n                        return true;\n                    }}\n                >\n                    {checkbox() ? '选中' : '没选中'}\n                </CheckBox>\n            </CheckGroup>\n\n            <CheckGroup multi={props.multi}>\n                <div class=\"flex gap-2\">\n                    <For each={groupController}>\n                        {(item) => {\n                            return <CheckBox label={item.children} value={item.value}></CheckBox>;\n                        }}\n                    </For>\n                </div>\n                <CheckGroupHelper>\n                    {({ inverse, setAll, activeIds, allRegistered }) => {\n                        return (\n                            <div class=\"flex gap-2\">\n                                <Button onClick={inverse} size=\"mini\">\n                                    反选\n                                </Button>\n                                <Button\n                                    onClick={() => {\n                                        setAll(activeIds().size === 0);\n                                    }}\n                                    size=\"mini\"\n                                >\n                                    {activeIds().size !== allRegistered().size ? '全选' : '全取消'}\n                                </Button>\n                            </div>\n                        );\n                    }}\n                </CheckGroupHelper>\n            </CheckGroup>\n        </>\n    );\n};\n"},{"path":"story/Code.story.tsx","code":"import { atom } from '@cn-ui/use';\nimport { createResource } from 'solid-js';\nimport { Select } from '@cn-ui/core';\nimport { AllowedCodeStyleNames, useCodeStyle, CodeStyleNames, Code } from '@cn-ui/highlight';\nexport const Controller = [];\nexport default (props) => {\n    const [code] = createResource(() => {\n        return fetch('https://cdn.jsdelivr.net/npm/@cn-ui/use@1.5.0/src/atom.ts').then((res) =>\n            res.text()\n        );\n    });\n    const themeValue = atom<AllowedCodeStyleNames>('github-dark');\n    const { link } = useCodeStyle(themeValue);\n    return (\n        <div class=\"p-4\">\n            <div class=\"rounded-md bg-white p-4 \">\n                动态样式\n                <Select\n                    options={CodeStyleNames as any as string[]}\n                    value={themeValue.reflux({ value: themeValue() }, (i) => i.value)}\n                ></Select>\n            </div>\n            <div class=\"\">\n                {code.loading ? (\n                    '加载中'\n                ) : (\n                    <Code\n                        lang=\"ts\"\n                        class=\"max-h-[50vh] overflow-auto rounded-lg p-2 shadow-xl\"\n                        code={code()}\n                    ></Code>\n                )}\n            </div>\n            {link}\n        </div>\n    );\n};\n"},{"path":"story/Collapse.story.tsx","code":"import { For } from 'solid-js';\nimport { atom } from '@cn-ui/use';\nimport { Button, Collapse, CollapseItem } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'accordion',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'destroyOnHide',\n        refresh: true,\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'lazyload',\n        refresh: true,\n    },\n];\nexport default (props) => {\n    const data = [...Array(5).keys()].map((i) => {\n        return {\n            label: '标签 ' + i,\n            name: 'tag ' + i,\n            value: atom(!!(i % 2)),\n            content: [...Array(i + 1).keys()].map((ii) => <span>{ii}</span>),\n        };\n    });\n    const Value = data[0].value;\n    return (\n        <>\n            <Button size=\"mini\" onClick={() => Value(!Value())}>\n                受控标签: {Value() ? 'true' : 'false'}\n            </Button>\n            <div class=\"mx-4 my-2 \">\n                <Collapse\n                    {...props}\n                    class=\"overflow-hidden rounded-xl border border-solid border-slate-200 text-gray-700\"\n                    onPanelChange={(...args) => {\n                        console.log(args);\n                    }}\n                >\n                    <For each={data}>\n                        {(item) => {\n                            return (\n                                <CollapseItem\n                                    id={item.name}\n                                    header={item.label}\n                                    name={item.name}\n                                    value={item.value}\n                                >\n                                    <div class=\"px-4 py-1 text-slate-500\">\n                                        {item.content}\n                                        <div>43434</div>\n                                        <div>43434</div>\n                                        <div>43434</div>\n                                        <div>43434</div>\n                                        <div>43434</div>\n                                    </div>\n                                </CollapseItem>\n                            );\n                        }}\n                    </For>\n                </Collapse>\n            </div>\n        </>\n    );\n};\n"},{"path":"story/CommandPalette.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { For, onCleanup, onMount } from 'solid-js';\nimport '@cn-ui/command-palette/pkg-dist/style.css';\nimport {\n    CommandPalette,\n    PaletteRoot,\n    Action,\n    defineAction,\n    useKeyWordsFilter,\n} from '@cn-ui/command-palette';\nimport { Button, CheckGroup, Image, Message, Space, CheckBox } from '@cn-ui/core';\nexport const Controller = [];\n\nconst initActions = [\n    {\n        id: 'message-info',\n        title: '发出提示',\n        subtitle: 'fjiefjeijeif',\n        keywords: ['Message', 'web detection', 'another'],\n        icon: 'https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n        run() {\n            Message.info('来自 Command Palette');\n        },\n    },\n    {\n        id: 'command',\n        title: '关闭',\n        subtitle: '反对反对的',\n        keywords: ['command', 'it is awesome'],\n        run() {\n            Message.info('关闭');\n        },\n    },\n];\n\nexport default (props) => {\n    const actionSource = atom<any>(initActions);\n    const actions = reflect<Action[]>(() => actionSource().map((i) => defineAction(i)));\n    const visible = atom(true);\n\n    onMount(() => {\n        // I want to add some actions after mount!\n        actionSource((i) => [\n            ...i,\n            {\n                id: 'hide',\n                title: 'Toggle Message KeyWords',\n                subtitle: 'Click Me',\n                keywords: ['Message'],\n                run() {\n                    return true;\n                },\n            },\n        ]);\n    });\n\n    // Helpful filter automatically generated by actions!\n\n    const { keywordsFilter, keywords } = useKeyWordsFilter(actions);\n    const components = {\n        // define the Icon on the left of every\n        ResultIcon({ action }) {\n            return (\n                <Image\n                    src={(action as any).icon}\n                    class=\"mr-4 h-10 w-10 overflow-hidden rounded-lg\"\n                ></Image>\n            );\n        },\n        // It will add a Tag Select Bar between search box and result list\n        Main() {\n            return (\n                <Space class=\"px-2\">\n                    <CheckGroup>\n                        <div class=\"flex gap-2 overflow-scroll px-2 py-1\">\n                            <For each={keywords()}>\n                                {(item) => {\n                                    return (\n                                        <CheckBox\n                                            value={item.value}\n                                            label={item.children}\n                                        ></CheckBox>\n                                    );\n                                }}\n                            </For>\n                        </div>\n                    </CheckGroup>\n                </Space>\n            );\n        },\n    };\n\n    return (\n        <div>\n            <PaletteRoot\n                filters={[keywordsFilter]}\n                visibility={visible}\n                actions={actions}\n                actionsContext={{}}\n                components={components}\n            >\n                <CommandPalette></CommandPalette>\n            </PaletteRoot>\n            {/* Control the reactive visible easier */}\n            <Button onClick={() => visible((i) => !i)}>{visible() ? '打开' : '关闭'}</Button>\n        </div>\n    );\n};\n"},{"path":"story/Cropper.story.tsx","code":"import { Atom, atom, reflect } from '@cn-ui/use';\nimport { Cropper } from '@cn-ui/cropper';\nimport { mockImages } from './mocks/images';\nexport const Controller = [];\nimport { debounce } from 'lodash-es';\nimport { createResource, Show } from 'solid-js';\nexport default (props) => {\n    const [images] = createResource(() => mockImages(1));\n    const preview = atom('');\n    return (\n        <Show when={images()}>\n            <Cropper\n                src={images()[0]}\n                options={{\n                    // cropperjs's options\n                    // https://github.com/fengyuanchen/cropperjs/blob/main/README.md\n                    aspectRatio: 1,\n                    viewMode: 1,\n                }}\n                // Yes，You can use debounce to control render frequency\n                previewDataURL={debounce(preview, 100) as any as Atom<string>}\n                class=\"max-h-64\"\n            ></Cropper>\n            <img src={preview()}></img>\n        </Show>\n    );\n};\n"},{"path":"story/Divider.story.tsx","code":"import { Divider, StyleDivider, Space } from '@cn-ui/core';\n\nexport default (props) => {\n    return (\n        <Space vertical={!props.vertical} class=\"h-64 w-full\">\n            <Divider {...props}></Divider>\n            <Divider {...props}>文本测试</Divider>\n            <StyleDivider {...props}></StyleDivider>\n        </Space>\n    );\n};\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'vertical',\n        refresh: true,\n    },\n];\n"},{"path":"story/Dnd.story.tsx","code":"export const Controller = [];\n\nimport { atom } from '@cn-ui/use';\nimport { DragPoster, DropReceiver } from '@cn-ui/headless';\nimport { Button, Message } from '@cn-ui/core';\nimport { debounce, throttle } from 'lodash-es';\nMessage.init();\nexport default (props) => {\n    const count = atom(0);\n    // 不能写在 JSX 里面，会无限重绘\n    const notice = throttle(() => {\n        Message.success('拖拽到这里了');\n    }, 3000);\n    return (\n        <>\n            <DragPoster send={(send) => send('DEFAULT', '传递的信息')}>\n                <Button>这是信息</Button>\n            </DragPoster>\n            <DropReceiver\n                detect={{\n                    DEFAULT: notice,\n                }}\n                receive={{\n                    DEFAULT(data) {\n                        count((i) => i + 1);\n                    },\n                }}\n            >\n                <Button>拖拽到这里 {count()}</Button>\n            </DropReceiver>\n        </>\n    );\n};\n"},{"path":"story/EditText.story.tsx","code":"import { useFont, Button, CopyText, EllipsisText } from '@cn-ui/core';\nexport const Controller = [];\nexport default (props) => {\n    return (\n        <>\n            <CopyText\n                style={{\n                    'font-family': 'var(--font-special)',\n                }}\n            >\n                这里面是可以复制的东西\n            </CopyText>\n            <EllipsisText line={2}>\n                可展开文本。A design is a plan or specification for the construction of an object or\n                system or for the implementation of an activity or process, or the result of that\n                plan or specification in the form of a prototype, product or process. The verb to\n                design expresses the process of developing a design. The verb to design expresses\n                the process of developing a design. A design is a plan or specification for the\n                construction of an object or system or for the implementation of an activity or\n                process, or the result of that plan or specification in the form of a prototype,\n                product or process. The verb to design expresses the process of developing a design.\n                The verb to design expresses the process of developing a design.\n            </EllipsisText>\n            <Button\n                onClick={() => {\n                    const { register, loadFont } = useFont();\n                    loadFont(\n                        'https://cdn.jsdelivr.net/gh/KonghaYao/chinese-free-web-font-storage/build/江西拙楷2.0/result.css'\n                    ).then((res) => {\n                        register('jiangxizhuokai');\n                    });\n                }}\n            >\n                {' '}\n                改变字体为江西拙楷\n            </Button>\n        </>\n    );\n};\n"},{"path":"story/Explorer.story.tsx","code":"export const Controller = [];\n\nimport { atom, reflect } from '@cn-ui/use';\nimport { createResource } from 'solid-js';\n\nimport { InputText, DefaultIcon, Message, Space, Explorer } from '@cn-ui/core';\n\nexport default () => {\n    const packageNames = atom<string>('jquery@3.2.1');\n    const [resource, { refetch }] = createResource(async () => {\n        return fetch('https://data.jsdelivr.com/v1/package/npm/' + packageNames()).then((i) =>\n            i.json()\n        );\n    });\n    const loop = (item, name, collection) => {\n        item.forEach((i) => {\n            if (i['type'] === 'directory') {\n                return loop(i.files, name + '/' + i.name, collection);\n            } else {\n                collection.push({ ...i, fullPath: name + '/' + i.name });\n            }\n        });\n        return;\n    };\n    const data = reflect(() => {\n        if (resource()) {\n            const collection = [];\n            loop(resource().files, '', collection);\n            return collection;\n        } else {\n            return [];\n        }\n    });\n    return (\n        <>\n            <h3>NPM 包文件展示 包名@版本号</h3>\n            <Space>\n                <InputText value={packageNames}></InputText>\n                <DefaultIcon name=\"check\" color=\"red\" onClick={() => refetch()}></DefaultIcon>\n            </Space>\n            <Explorer\n                Files={data}\n                onOpenFile={(file) => {\n                    Message.info(file.fullPath);\n                }}\n            ></Explorer>\n        </>\n    );\n};\n"},{"path":"story/Form.story.tsx","code":"import { Atom, atom, reflect } from '@cn-ui/use';\nimport {\n    FormSwitch,\n    Button,\n    FromSelect,\n    Form,\n    registerFormComponent,\n    defineFormTemplate,\n    FromRate,\n    FromColor,\n    FromText,\n    FormNumber,\n    FormSlider,\n    FormRadio,\n} from '@cn-ui/core';\nregisterFormComponent.set('switch', () => Promise.resolve({ default: FormSwitch }));\nregisterFormComponent.set('select', () => Promise.resolve({ default: FromSelect }));\nregisterFormComponent.set('rate', () => Promise.resolve({ default: FromRate }));\nregisterFormComponent.set('color', () => Promise.resolve({ default: FromColor }));\nregisterFormComponent.set('text', () => Promise.resolve({ default: FromText }));\nregisterFormComponent.set('range', () => Promise.resolve({ default: FormNumber }));\nregisterFormComponent.set('slider', () => Promise.resolve({ default: FormSlider }));\nregisterFormComponent.set('radio', () => Promise.resolve({ default: FormRadio }));\nexport const Controller = [\n    { type: 'switch', default: false, prop: 'disabled' },\n    { type: 'switch', default: true, prop: 'showWordLimit' },\n    { type: 'switch', default: true, prop: 'allowClear' },\n];\n\nconst template = defineFormTemplate([\n    {\n        type: 'select',\n        default: 'auto',\n        prop: 'language',\n\n        options: [\n            {\n                label: '中文',\n                value: 'zh-cn',\n            },\n            {\n                label: '英文',\n                value: 'en',\n            },\n            {\n                label: '默认',\n                value: 'auto',\n            },\n        ],\n        valid(value) {\n            console.log(value);\n            return value.value === 'auto' && '请选中一种语言';\n        },\n    },\n    {\n        type: 'radio',\n        default: 'auto',\n        prop: 'radio',\n        options: [\n            {\n                label: '中文',\n                value: false,\n            },\n            {\n                label: '英文',\n                value: false,\n            },\n            {\n                label: '默认',\n                value: false,\n            },\n        ],\n    },\n    {\n        type: 'switch',\n        default: true,\n        prop: 'allowClear',\n        valid(value: boolean, total) {\n            return value !== false && 'It should be false';\n        },\n    },\n    {\n        type: 'color',\n        default: '#000',\n        prop: 'color',\n    },\n    {\n        type: 'rate',\n        default: 0,\n        prop: 'rate',\n    },\n    {\n        type: 'text',\n        default: '',\n        prop: 'text',\n    },\n    {\n        type: 'range',\n        default: 0,\n        params: {\n            min: -10,\n            max: 100,\n            step: 10,\n        },\n        prop: 'range',\n    },\n    {\n        type: 'slider',\n        default: 0,\n        prop: 'slider',\n        label: '滑动条',\n    },\n]);\nexport default (props) => {\n    const val = atom<{\n        [key: string]: Atom<unknown>;\n    }>({});\n\n    return (\n        <>\n            <main class=\"m-4 flex flex-col overflow-hidden rounded-lg  shadow-md\">\n                <Form template={template} value={val}></Form>\n                <Button\n                    class=\"m-2\"\n                    onClick={() => {\n                        console.log(\n                            Object.fromEntries(Object.entries(val()).map((i) => [i[0], i[1]()]))\n                        );\n                    }}\n                >\n                    提交\n                </Button>\n            </main>\n        </>\n    );\n};\n"},{"path":"story/Icon.story.tsx","code":"import { Icon, InputText, Message, Space } from '@cn-ui/core';\nimport { atom, reflect } from '@cn-ui/use';\nimport copy from 'copy-to-clipboard';\nimport { createResource, For } from 'solid-js';\n\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'spin',\n    },\n    {\n        type: 'range',\n        default: 41,\n        prop: 'size',\n        min: 0,\n        max: 100,\n    },\n];\nMessage.init();\nexport default (props) => {\n    const [totals] = createResource<string[]>(() =>\n        fetch('https://cdn.jsdelivr.net/gh/marella/material-icons/_data/versions.json', {\n            cache: 'force-cache',\n        })\n            .then((res) => res.json())\n            .then((res) => Object.keys(res))\n    );\n    const searchText = atom('');\n    const filtered = reflect(() => {\n        const text = searchText();\n        if (text === '') {\n            return totals() || [];\n        } else {\n            const reg = new RegExp(text);\n            return totals().filter((i) => reg.test(i));\n        }\n    });\n    return (\n        <div class=\"flex h-screen flex-col \">\n            <div class=\"m-4 text-blue-500\">\n                <div>Find {filtered().length}</div>\n                <InputText value={searchText}></InputText>\n            </div>\n\n            <Space\n                class=\"scroll-box-none flex-1 content-start overflow-auto text-slate-600\"\n                wrap\n                onClick={(e) => {\n                    if (e.target.classList.contains('cn-icon-font')) {\n                        copy(e.target.textContent);\n                        Message.success('复制成功');\n                    }\n                }}\n            >\n                <For each={filtered()}>\n                    {(item) => {\n                        return (\n                            <Space vertical>\n                                <Icon name={item} {...props}></Icon>\n                            </Space>\n                        );\n                    }}\n                </For>\n            </Space>\n        </div>\n    );\n};\n"},{"path":"story/Image.story.tsx","code":"import { Image, Space, Mask } from '@cn-ui/core';\n\nimport { atom } from '@cn-ui/use';\nimport { mockImages } from './mocks/images';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'round',\n    },\n\n    {\n        type: 'select',\n        default: 'cover',\n        prop: 'fit',\n        options: ['cover', 'contain', 'fill', 'none', 'scale-down'].map((i) => ({\n            value: i,\n        })),\n    },\n    {\n        type: 'select',\n        default: 'center',\n        prop: 'position',\n        options: ['center', 'top', 'right', 'bottom', 'left'].map((i) => ({\n            value: i,\n        })),\n    },\n];\nimport { useViewer } from '@cn-ui/viewer';\nexport default (props) => {\n    const { getViewer, addImages } = useViewer({});\n    const img = 'https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg';\n    const images = atom([]);\n    mockImages(5).then((res) => {\n        images(res);\n        console.log(images());\n        addImages(\n            images().map((i) => {\n                return {\n                    alt: '图片 ' + i,\n                    src: i,\n                };\n            })\n        );\n    });\n    return (\n        <Space vertical>\n            <Image height={100} width={100} src={images()[0] || img} {...props}></Image>\n            <Image height={100} width={100} src=\"\" block {...props}></Image>\n            <h3>点击预览</h3>\n            <Image\n                height={100}\n                width={100}\n                src={images()[1] || img}\n                {...props}\n                onClick={() => getViewer().show()}\n            ></Image>\n            <Mask squircle>\n                <Image height={100} width={100} src={images()[2] || img} {...props}></Image>\n            </Mask>\n        </Space>\n    );\n};\n"},{"path":"story/InputNumber.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\n\nimport { InputNumber, Slider, Space } from '@cn-ui/core';\nexport default (props) => {\n    const val = atom(4);\n    return (\n        <Space vertical class=\"m-4 \">\n            <InputNumber {...props} min={0} max={100}></InputNumber>\n            <InputNumber {...props} button step={4} value={val}></InputNumber>\n            <InputNumber\n                {...props}\n                button\n                min={0}\n                max={10}\n                step={2}\n                value={val}\n                disabled_input\n            ></InputNumber>\n            {val()}\n            <Slider {...props} min={0} max={10} step={2} value={val}></Slider>\n        </Space>\n    );\n};\n"},{"path":"story/InputText.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { InputText, Button, Icon, Space } from '@cn-ui/core';\n\nexport const Controller = [\n    { type: 'switch', default: false, prop: 'disabled' },\n    { type: 'switch', default: true, prop: 'showWordLimit' },\n    { type: 'switch', default: true, prop: 'allowClear' },\n];\nexport default (props) => {\n    const val = atom('');\n    return (\n        <Space vertical class=\"m-4\">\n            <InputText {...props}></InputText>\n            <InputText {...props} maxLength={10} value={val}></InputText>\n            <InputText\n                {...props}\n                value={val}\n                allowClear={false}\n                icon={'https://'}\n                showWordLimit={false}\n            >\n                <Button size=\"mini\" color=\"blue\">\n                    <Icon name=\"search\"></Icon>\n                </Button>\n            </InputText>\n        </Space>\n    );\n};\n"},{"path":"story/LazyLoad.story.tsx","code":"export const Controller = [];\nimport 'animate.css';\nimport { LazyLoad, sleep } from '@cn-ui/core';\nimport { onCleanup, onMount } from 'solid-js';\nimport { createAC } from '@cn-ui/headless';\n\nconst AC = createAC({});\nexport default () => {\n    const Comp = () => {\n        onMount(() => console.log('可视了'));\n        onCleanup(() => console.log('销毁可视操作'));\n        return <div class=\"h-screen bg-blue-500\"></div>;\n    };\n    return (\n        <section class=\"h-screen overflow-auto\">\n            <section class=\"h-screen w-full bg-gray-100\"></section>\n            <section class=\"h-screen w-full bg-gray-100\"></section>\n\n            <LazyLoad\n                class=\"h-screen\"\n                fallback={<div class=\"h-screen w-full\">不可视状态</div>}\n                loading={<div>加载中</div>}\n                threshold={[0.3, 1]}\n                // Async Loading\n                load={() => sleep(1000, Promise.resolve(Comp))}\n                // combine Anime Component\n                anime={{\n                    in: 'fadeInLeft',\n                    out: 'fadeOutRight',\n                }}\n            ></LazyLoad>\n            <section class=\"h-screen w-full bg-gray-100\"></section>\n            <section class=\"h-screen w-full bg-gray-100\"></section>\n        </section>\n    );\n};\n"},{"path":"story/Markdown.story.tsx","code":"import { Typography } from '@cn-ui/core';\nimport { Show } from 'solid-js';\nimport { Markdown } from '@cn-ui/core';\n\nexport const Controller = [\n    {\n        test: true,\n        type: 'switch',\n        prop: 'githubStyleCSS',\n        default: false,\n        refresh: true,\n    },\n];\nconst getText = (url: string) => fetch(url).then((res) => res.text());\nimport rehypeHighlight from 'rehype-highlight';\nimport { useCodeStyle } from '@cn-ui/highlight';\nimport { resource } from '@cn-ui/use';\n\nexport default (props) => {\n    const { link } = useCodeStyle('github');\n    const md = resource(async () => {\n        const content = await getText('https://cdn.jsdelivr.net/npm/markdown-it/README.md');\n        const code = await getText('https://cdn.jsdelivr.net/npm/@cn-ui/use/src/index.ts');\n        return content + '\\n```ts\\n' + code + '```';\n    });\n\n    if (props.githubStyleCSS) {\n        return (\n            <Show when={md.isReady()}>\n                <Markdown\n                    class=\"markdown-body p-4\"\n                    code={md()}\n                    rehypePlugins={[rehypeHighlight]}\n                ></Markdown>\n                <link\n                    rel=\"stylesheet\"\n                    href=\"https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown-light.css\"\n                ></link>\n                {link}\n            </Show>\n        );\n    }\n    return (\n        <Show when={md.isReady()}>\n            <Typography>\n                <Markdown rehypePlugins={[rehypeHighlight]}>{md()}</Markdown>\n            </Typography>\n            {link}\n        </Show>\n    );\n};\n"},{"path":"story/Mask.story.tsx","code":"import { Image, Icon, Badge, Relative, Position, Mask } from '@cn-ui/core';\nexport const Controller = [];\nexport default (props) => {\n    const avatar = (round = true) => (\n        <Image\n            src=\"https://foruda.gitee.com/avatar/1663940152493388167/5342313_dongzhongzhidong_1663940152.png\"\n            // 使用 block 布局修复 inline 的 多余高度问题\n            block\n            height={60}\n            round={round}\n            width={60}\n        ></Image>\n    );\n    return (\n        <>\n            <Relative {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <div\n                        class=\"bg-slate-900 text-white\"\n                        style={{\n                            'border-radius': '4px',\n                        }}\n                    >\n                        <Icon name=\"camera\"></Icon>\n                    </div>\n                </Position>\n            </Relative>\n            {/* An Example Combine Relative and Mask */}\n            <Relative {...props} class=\"w-fit\">\n                <Mask hexagon>\n                    {avatar(false)}\n                    <Position full right=\"0\" bottom=\"0\">\n                        <div\n                            style={{\n                                background: '#00000099',\n                                height: '100%',\n                                color: 'white',\n                                display: 'flex',\n                                'justify-content': 'center',\n                                'align-items': 'center',\n                            }}\n                        >\n                            <Icon name=\"camera\" size={36}></Icon>\n                        </div>\n                    </Position>\n                </Mask>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                <Mask squircle>{avatar(false)}</Mask>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                <Mask hexagon>{avatar(false)}</Mask>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                <Mask url=\"/line-mask.png\">{avatar(false)}</Mask>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <Badge count=\"100\"></Badge>\n                </Position>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <Badge\n                        count=\"1\"\n                        onclick={() => {\n                            console.log('点击成功');\n                        }}\n                    ></Badge>\n                </Position>\n            </Relative>\n            <Relative {...props} class=\"w-fit\">\n                {avatar()}\n                <Position top=\"0.2em\" right=\"0.2em\">\n                    <Badge dot></Badge>\n                </Position>\n            </Relative>\n        </>\n    );\n};\n"},{"path":"story/Message.story.tsx","code":"import { Button, Message } from '@cn-ui/core';\n\n//! 必须先注册\n\nMessage.init();\nexport const Controller = [];\nexport default (props) => {\n    const Content = ['info', 'success', 'warning', 'error', 'normal', 'loading'].map((i) => {\n        return (\n            <Button\n                onClick={() => {\n                    const close = Message[i]({\n                        id: Math.random().toString(),\n                        content: '这是一条信息',\n                        closable: true,\n                        duration: 0,\n                    });\n                }}\n            >\n                {i}\n            </Button>\n        );\n    });\n    return <div class=\"flex flex-wrap gap-2\">{Content}</div>;\n};\n"},{"path":"story/Monaco.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { Monaco } from '@cn-ui/monaco';\nimport {} from '@cn-ui/core';\nexport const Controller = [];\n\nexport default (props) => {\n    const code = atom('');\n    const language = atom('cpp');\n    return (\n        <div class=\"h-screen w-screen\">\n            <Monaco value={code} language={'cpp'} theme={'github-gist'}></Monaco>\n        </div>\n    );\n};\n"},{"path":"story/Password.story.tsx","code":"export const Controller = [\n    { type: 'switch', default: false, prop: 'disabled' },\n    { type: 'switch', default: true, prop: 'score' },\n];\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\nimport { Password } from '@cn-ui/core';\nimport { PasswordScore } from '@cn-ui/password-score';\nexport default (props) => {\n    return (\n        <div>\n            <Password {...props}></Password>\n        </div>\n    );\n};\n"},{"path":"story/Select.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { Select, InputColor, Rate } from '@cn-ui/core';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\n\nexport default (props) => {\n    const val = atom({ value: '232312' });\n    const options = atom(\n        [...Array(10).keys()].flatMap((i) => [\n            'Beijing',\n            'Shanghai',\n            'Guangzhou',\n            'Disabled',\n            '343'.repeat(10),\n            '232312',\n            '323232',\n        ])\n    );\n    const color = atom('');\n    const rate = atom(0);\n    return (\n        <div>\n            <Select {...props} value={val} options={options}></Select>\n            <InputColor {...props} value={color}></InputColor>\n            <Rate {...props} value={rate}></Rate>\n            <Rate {...props} value={rate} allowHalf></Rate>\n        </div>\n    );\n};\n"},{"path":"story/Sortable.story.tsx","code":"export const Controller = [];\nimport { SortableList, SortableShared } from '@cn-ui/sortable';\nimport { atom, reflect } from '@cn-ui/use';\nimport { shuffle } from 'lodash-es';\nimport { createContext, createEffect, useContext } from 'solid-js';\nimport { Button, Message, Space } from '@cn-ui/core';\n\nconst NormalList = () => {\n    const { normalList: list } = useContext(ListContext);\n    return (\n        <section>\n            <Button onClick={() => list((i) => shuffle(i))}>随机</Button>\n            <div> ReactiveData: {JSON.stringify(list().map((i) => i.info))}</div>\n            <SortableList each={list} options={{ animation: 150 }}>\n                {(item) => {\n                    return (\n                        <div class=\"m-2 select-none bg-gray-50 p-2 text-center\">{item.info}</div>\n                    );\n                }}\n            </SortableList>\n        </section>\n    );\n};\n\nconst SharedList = () => {\n    const { list, anotherList } = useContext(ListContext);\n    const render = (isLeft: boolean) => (item: any) => {\n        return (\n            <div\n                class=\"m-2 select-none \"\n                classList={{\n                    'bg-red-50': isLeft,\n                    'bg-blue-50': !isLeft,\n                }}\n            >\n                {item.info}\n            </div>\n        );\n    };\n    const sum = (list: number[]) => list.reduce((a, b) => a + b, 0);\n    const sumOfLeft = reflect(() => sum(list().map((i) => i.id)));\n    const sumOfRight = reflect(() => sum(anotherList().map((i) => i.id)));\n    createEffect(() => {\n        if (sumOfLeft() === sumOfRight()) {\n            Message.init();\n            Message.success('你成功了');\n        }\n    });\n    return (\n        <section>\n            <h3> Shared List ! All Reactive</h3>\n            <div class=\"text-center\">\n                <kbd>{sumOfLeft()}</kbd> :<kbd>{sumOfRight()}</kbd>\n            </div>\n            <Space>\n                <SortableShared.Provider\n                    value={{\n                        // create an environment to shared the data\n                        sharedData: [list, anotherList],\n                        options: {\n                            group: 'KongHaYao',\n                            animation: 150,\n                        },\n                    }}\n                >\n                    <SortableList class=\"flex-1  text-center\" each={list}>\n                        {render(false)}\n                    </SortableList>\n                    <SortableList class=\"flex-1  text-center\" each={anotherList}>\n                        {render(true)}\n                    </SortableList>\n                </SortableShared.Provider>\n            </Space>\n        </section>\n    );\n};\n\nconst ListContext = createContext({\n    normalList: atom(\n        [...Array(5).keys()].map((i) => {\n            return { id: i, info: i.toString() };\n        })\n    ),\n    list: atom(\n        [...Array(6).keys()].map((i) => {\n            return { id: i, info: i.toString() };\n        })\n    ),\n    anotherList: atom(\n        [...Array(6).keys()].map((i) => {\n            return { id: i + 10, info: (i + 10).toString() };\n        })\n    ),\n});\nexport default (props) => {\n    return (\n        <ListContext.Provider value={undefined}>\n            <NormalList></NormalList>\n            <SharedList></SharedList>\n        </ListContext.Provider>\n    );\n};\n"},{"path":"story/Space.story.tsx","code":"import { Space } from '@cn-ui/core';\nimport { Anime } from '@cn-ui/transition';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'wrap',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'vertical',\n    },\n\n    {\n        type: 'select',\n        default: 'mini',\n        prop: 'size',\n        options: ['mini', 'small', 'medium', 'large'].map((i) => ({\n            value: i,\n        })),\n    },\n];\n\nimport 'animate.css/source/fading_entrances/fadeInDown.css';\nimport 'animate.css/source/fading_exits/fadeOutUp.css';\nimport { createSignal, For, onMount } from 'solid-js';\nexport default (props) => {\n    const arr = (num) => [...Array(num).keys()];\n    const [origin, setOrigin] = createSignal<number[]>(arr(10));\n\n    return (\n        <>\n            <Space {...props}>\n                {origin().map((i) => {\n                    return <div style={{ width: '3rem', 'background-color': '#eee' }}>{i}</div>;\n                })}\n            </Space>\n\n            <Space {...props}>\n                <Anime\n                    group\n                    in=\"fadeInDown\"\n                    out=\"fadeOutUp\"\n                    stagger={100}\n                    enterClass=\"hidden\"\n                    appear\n                >\n                    <For each={origin()}>\n                        {(i) => {\n                            return (\n                                <div style={{ width: '3rem', 'background-color': '#eee' }}>{i}</div>\n                            );\n                        }}\n                    </For>\n                </Anime>\n            </Space>\n        </>\n    );\n};\n"},{"path":"story/Split.story.tsx","code":"export const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'vertical',\n    },\n];\nimport { Split } from '@cn-ui/split';\nimport { atom } from '@cn-ui/use';\nimport { For, onMount } from 'solid-js';\nimport { Button } from '@cn-ui/core';\nexport default (props) => {\n    const list = atom([...Array(2).keys()].map((i) => i));\n    return (\n        <>\n            <span>\n                <Button\n                    onClick={() => {\n                        list((i) => [...i, 1]);\n                    }}\n                >\n                    Add Number\n                </Button>\n            </span>\n\n            <Split\n                class=\"h-1/2 w-full bg-slate-50 \"\n                {...props}\n                minSize={0}\n                // gutterSize={5}\n                snapOffset={50}\n                expandToMin={true}\n            >\n                <For each={list()}>\n                    {(item) => {\n                        return <span class=\"h-64 w-64\">{item}</span>;\n                    }}\n                </For>\n            </Split>\n        </>\n    );\n};\n"},{"path":"story/Swiper.story.tsx","code":"export const Controller = [];\n\n// 使用包内部的导出，原项目有 Bug\n// 所有 css 文件通过 js 直接导入\nimport { Swiper, SwiperSlide } from '@cn-ui/swiper';\nimport { Navigation, Pagination, Scrollbar, EffectFade, Lazy } from '@cn-ui/swiper/dist/module';\n\nimport { Component, For, JSXElement } from 'solid-js';\n\nexport default () => {\n    const DemoSlide: Component<{ children: JSXElement; index: number }> = (props) => {\n        return (\n            <SwiperSlide\n                style={{\n                    height: '150px',\n                    color: 'white',\n                    'background-color': `hwb(${(props.index * 360) / 10}deg  18% 28%)`,\n                }}\n            >\n                {props.children}\n            </SwiperSlide>\n        );\n    };\n    // https://swiperjs.com/demos\n    // 更多 Demo 请参照 swiper 官网\n    return (\n        <>\n            <h3> Swiper 插件太强了，这里只是展示部分用法</h3>\n            <Swiper\n                //  声明需要使用的插件\n                modules={[Navigation, Pagination, Scrollbar]}\n                navigation={true}\n                pagination={true}\n                scrollbar={true}\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                onSlideChange={() => console.log('slide change')}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n\n            <h3> 竖直操作</h3>\n            <Swiper\n                direction={'vertical'}\n                loop\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                style={{\n                    flex: '1',\n                    height: '150px',\n                }}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n            <h3> 特效 </h3>\n            <Swiper\n                modules={[EffectFade]}\n                loop\n                effect={'fade'}\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                style={{\n                    flex: '1',\n                    height: '150px',\n                }}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n\n            <h3> 图片懒加载</h3>\n            <Swiper\n                style={{\n                    '--swiper-navigation-color': '#fff',\n                    '--swiper-pagination-color': '#fff',\n                    height: '150px',\n                }}\n                lazy={true}\n                pagination={{\n                    clickable: true,\n                }}\n                navigation={true}\n                modules={[Lazy, Pagination, Navigation]}\n            >\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-1.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-2.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-3.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n            </Swiper>\n        </>\n    );\n};\n"},{"path":"story/Switch.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\nconst sleep = (ms: number) =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(null);\n        }, ms);\n    });\nimport { Switch } from '@cn-ui/core';\nexport default (props) => {\n    const val = atom(false);\n    return (\n        <div class=\"flex gap-2 p-4\">\n            <Switch {...props} value={val} onClick={async () => sleep(1000)}></Switch>\n            <Switch value={val}></Switch>\n        </div>\n    );\n};\n"},{"path":"story/Tabs.story.tsx","code":"import { For } from 'solid-js';\nimport { Tabs, Tab, TabsHeader, Button } from '@cn-ui/core';\nimport 'animate.css/source/fading_entrances/fadeInDown.css';\nimport 'animate.css/source/fading_exits/fadeOutUp.css';\nimport { TransitionGroup } from '@cn-ui/transition';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: true,\n        prop: 'destroyOnHide',\n    },\n];\n\nexport default (props) => {\n    const data = [...Array(5).keys()];\n    return (\n        <>\n            <Tabs activeId={'1'}>\n                <div class=\"ExtraNode\">\n                    {/* 可以自定义表头, 原始是没有表头的 */}\n                    <TabsHeader></TabsHeader>\n                    {/* 使用动画，但是动画只有在组件销毁时触发 */}\n                    {/* 可以深层嵌套使用 */}\n                    <div class=\"ExtraNode\">\n                        <TransitionGroup\n                            {...{\n                                enterActiveClass: 'animated fadeInDown',\n                                exitActiveClass: 'animated fadeOutUp',\n                            }}\n                        >\n                            <For each={data}>\n                                {(item) => {\n                                    return (\n                                        <Tab id={item.toString()} {...props}>\n                                            {item}\n                                        </Tab>\n                                    );\n                                }}\n                            </For>\n                        </TransitionGroup>\n                    </div>\n                </div>\n            </Tabs>\n        </>\n    );\n};\n"},{"path":"story/Tag.story.tsx","code":"import { For, onMount } from 'solid-js';\nimport { atom } from '@cn-ui/use';\nimport { Space, Tag, Collapse } from '@cn-ui/core';\nimport { Anime } from '@cn-ui/transition';\nconst COLORS = Object.keys(Gradient);\nexport const Controller = [\n    {\n        type: 'switch',\n        default: true,\n        prop: 'closable',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'bordered',\n    },\n];\n\nimport 'animate.css/source/bouncing_entrances/bounceIn.css';\nimport 'animate.css/source/bouncing_exits/bounceOut.css';\nimport { Gradient } from '../_util/design';\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\nexport default (props) => {\n    const data = [...Array(20).keys()].map((i) => {\n        return {\n            name: 'tag ' + i,\n            value: atom(true),\n            visible: atom(true),\n            onClose: () => {\n                return sleep(i * 100).then((res) => {\n                    console.log('触发关闭', i * 100);\n                });\n            },\n            color: COLORS[i % COLORS.length],\n        };\n    });\n    console.log(data);\n    // 想要获取 所有标签的打开值:\n    //  data.map((i) => i.value());\n    const Value = data[0].visible;\n\n    return (\n        <>\n            <button onclick={() => Value(!Value())}>受控标签: {Value() ? 'true' : 'false'}</button>\n            <Tag>这是一个标签</Tag>\n            <div class=\"flex flex-wrap gap-2\">\n                <Anime group in=\"bounceIn\" out=\"bounceOut\">\n                    {/*  必须使用 For 循环才能使用动画 */}\n                    <For each={data}>\n                        {(item) => {\n                            return (\n                                <Tag\n                                    color={item.color}\n                                    visible={item.visible}\n                                    onClose={item.onClose}\n                                    {...props}\n                                >\n                                    {item.name}\n                                </Tag>\n                            );\n                        }}\n                    </For>\n                </Anime>\n            </div>\n        </>\n    );\n};\n"},{"path":"story/Trigger.story.tsx","code":"import { atom } from '@cn-ui/use';\nimport { Button, Space, Message, Trigger } from '@cn-ui/core';\nexport const Controller = [];\n\nexport default (props) => {\n    const visible = atom(false);\n    const disabled = atom(false);\n    return (\n        <Space wrap>\n            <Trigger\n                {...{ visible, disabled }}\n                trigger=\"mouseenter click\"\n                content={\n                    <Space>\n                        <div>Inner1</div>\n                        <div>Inner</div>\n                    </Space>\n                }\n            >\n                <Button>hover</Button>\n            </Trigger>\n            <Button\n                onClick={() => {\n                    visible((i) => !i);\n                }}\n            >\n                {visible() ? 'showing' : 'hiding'}\n            </Button>\n            <Button\n                onClick={() => {\n                    disabled((i) => !i);\n                    console.log('点击');\n                }}\n            >\n                {disabled() ? 'disabled' : 'enable'}\n            </Button>\n\n            <Trigger\n                content={\n                    <div>\n                        <Button\n                            text\n                            onClick={() => {\n                                Message.init();\n                                Message.success('点击成功');\n                            }}\n                        >\n                            可以点击\n                        </Button>\n                    </div>\n                }\n                interactive\n                trigger=\"mouseenter click\"\n            >\n                <Button block>可交互点击层</Button>\n            </Trigger>\n        </Space>\n    );\n};\n"},{"path":"story/Typography.story.tsx","code":"import { Typography } from '@cn-ui/core';\nimport { useCodeStyle } from '@cn-ui/highlight';\nexport const Controller = [];\nimport { Demo } from './Typo/Demo';\nexport default (props) => {\n    const { link } = useCodeStyle('github-dark');\n    return (\n        <Typography class=\"bg-white\">\n            {Demo()}\n            {link}\n        </Typography>\n    );\n};\n"},{"path":"story/Uploader.story.tsx","code":"export const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'mockUpload',\n        description: '非属性，为测试的一个效果',\n        test: true,\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'multiple',\n        refresh: true,\n    },\n    {\n        type: 'select',\n        default: 'replace',\n        prop: 'mode',\n        options: ['replace', 'add'].map((i) => ({ value: i })),\n        refresh: true,\n    },\n    {\n        type: 'select',\n        default: '',\n        prop: 'accept',\n        options: ['', 'image/*'].map((i) => ({ value: i })),\n        refresh: true,\n    },\n];\n\nimport { atom } from '@cn-ui/use';\nimport { Space, SimpleUploader, UploaderRoot, UploadList } from '@cn-ui/core';\n\nimport { fakeUpload, mockUpload } from '../../mocks/upload';\nexport default (props) => {\n    const Files = atom([]);\n    return (\n        <div>\n            <UploaderRoot\n                Files={Files}\n                uploading={props.mockUpload ? mockUpload : fakeUpload}\n                {...props}\n            >\n                <Space vertical class=\"w-full\">\n                    <SimpleUploader></SimpleUploader>\n                    <UploadList class=\"w-full\"></UploadList>\n                </Space>\n                {/* <UploadPanel></UploadPanel> */}\n            </UploaderRoot>\n        </div>\n    );\n};\n"},{"path":"story/WaterFall.story.tsx","code":"export const Controller = [];\n\nimport { atom } from '@cn-ui/use';\nimport { Image, LazyLoad, WaterFall } from '@cn-ui/core';\nimport { photos } from './mocks/photos';\nimport 'animate.css';\n\nexport default (props) => {\n    const items = atom(photos);\n    return (\n        <WaterFall items={items} column={2}>\n            {(item) => {\n                return (\n                    <LazyLoad\n                        class=\"w-full\"\n                        style={{\n                            'aspect-ratio': `${item.width}/${item.height}`,\n                        }}\n                        fallback={<div class=\"h-screen w-full\">暂时不显示</div>}\n                        loading={<div>加载中。。。</div>}\n                        threshold={[0.3, 1]}\n                        // Async Loading\n                        load={async () => () => <Image src={item.src} />}\n                        // combine Anime Component\n                        anime={{\n                            in: 'fadeInLeft',\n                            out: 'fadeOutRight',\n                        }}\n                        once\n                    ></LazyLoad>\n                );\n            }}\n        </WaterFall>\n    );\n};\n"}]