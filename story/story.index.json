[{"path":"src/components/Box/Box.story.tsx","code":"export const Controller = [];\nimport { Image, Result, Box } from '@cn-ui/core';\nexport default (props) => {\n    const baseStyle = { height: '200px', width: '100%' };\n    return (\n        <>\n            <div style={baseStyle}>\n                <Box\n                    icon={\n                        <Image\n                            src=\"https://doodleipsum.com/700x525/hand-drawn?i=dee23ea78d4bed889e6b2c07f25f3a13\"\n                            style={{ 'max-width': '70%', 'max-height': '70%', overflow: 'hidden' }}\n                        ></Image>\n                    }\n                    subTitle=\"数据为空\"\n                ></Box>\n            </div>\n            <div style={baseStyle}>\n                <Result icon=\"success\" title=\"数据为空\" subTitle=\"这是一些描述信息\"></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result icon=\"error\" title=\"数据为空\" subTitle=\"这是一些描述信息\"></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result icon=\"info\" title=\"数据为空\" subTitle=\"这是一些描述信息\"></Result>\n            </div>\n            <div style={baseStyle}>\n                <Result icon=\"warning\" title=\"数据为空\" subTitle=\"这是一些描述信息\"></Result>\n            </div>\n        </>\n    );\n};\n"},{"path":"src/components/Breadcrumb/Breadcrumb.story.tsx","code":"export const Controller = [];\n\nimport { atom, reflect } from '@cn-ui/use';\nimport { Breadcrumb } from '@cn-ui/core';\nexport default () => {\n    const value = atom<string[]>(['1', '2']);\n    return (\n        <>\n            <Breadcrumb list={value}></Breadcrumb>\n        </>\n    );\n};\n"},{"path":"src/components/Card/Card.story.tsx","code":"import { Card } from '@cn-ui/core';\nexport const Controller = [];\nimport './Story.less';\nexport default (props) => {\n    return (\n        <Card\n            className=\"demo-card\"\n            background={\n                <img\n                    class=\"background\"\n                    src=\"https://images.unsplash.com/photo-1614094082869-cd4e4b2905c7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\"\n                />\n            }\n        >\n            <div class=\"flex flex-col h-full w-full p-4\">\n                <header>中文</header>\n                <div class=\"flex-1\" style={{ 'min-height': '2em' }}></div>\n\n                <footer>中文分解机覅</footer>\n                <nav>极致的描述信息</nav>\n            </div>\n        </Card>\n    );\n};\n"},{"path":"src/components/Button/Button.story.tsx","code":"import { createSignal } from 'solid-js';\nimport { Button } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'disabled',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'iconOnly',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'loading',\n    },\n    {\n        type: 'select',\n        default: 'square',\n        prop: 'shape',\n        options: ['square', 'circle', 'round'].map((i) => ({ value: i })),\n    },\n    {\n        type: 'select',\n        default: 'default',\n        prop: 'size',\n        options: ['mini', 'small', 'default', 'large'].map((i) => ({ value: i })),\n    },\n    {\n        type: 'select',\n        default: 'primary',\n        prop: 'type',\n        options: ['primary', 'secondary', 'text', 'outline'].map((i) => ({\n            value: i,\n        })),\n    },\n    {\n        type: 'select',\n        default: 'default',\n        prop: 'status',\n        options: ['default', 'warning', 'danger', 'success'].map((i) => ({\n            value: i,\n        })),\n    },\n];\nexport default (props) => {\n    const [type, setType] = createSignal<'success' | 'danger'>('success');\n    const [loading, setLoading] = createSignal(false);\n    console.log('刷新组件');\n    return (\n        <>\n            <Button {...props}>按钮一个</Button>\n            <br />\n            <Button {...props} block>\n                按钮一个\n            </Button>\n            <Button\n                status={type()}\n                loading={loading()}\n                block\n                onclick={() => {\n                    setLoading((i) => {\n                        setType(i ? 'success' : 'danger');\n                        return !i;\n                    });\n                }}\n            >\n                按钮一个\n            </Button>\n        </>\n    );\n};\n"},{"path":"src/components/Cascader/Cascader.story.tsx","code":"import { atom } from '@cn-ui/use';\nimport { Cascader, useChinaArea } from '@cn-ui/core';\nexport const Controller = [];\n\nexport default (props) => {\n    const value = atom(['北京市', '北京市', '东城区']);\n    const { options } = useChinaArea(value);\n    return (\n        <>\n            <Cascader options={options} value={value}></Cascader>\n            {value().join(' ')}\n        </>\n    );\n};\n"},{"path":"src/components/Code/Code.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { createResource, onMount } from 'solid-js';\nimport { Select } from '../Form';\nimport { Code } from '@cn-ui/highlight';\nimport { AllowedCodeStyleNames, useCodeStyle, CodeStyleNames } from './useCodeStyle';\n\nexport const Controller = [];\nexport default (props) => {\n    const [code] = createResource(() => {\n        return fetch('https://cdn.jsdelivr.net/npm/@cn-ui/use@1.5.0/src/atom.ts').then((res) =>\n            res.text()\n        );\n    });\n    const themeValue = atom<AllowedCodeStyleNames>('atom-dark');\n    const { link } = useCodeStyle(themeValue);\n    return (\n        <div>\n            动态样式{' '}\n            <Select options={atom(CodeStyleNames as any as string[])} value={themeValue}></Select>\n            {link}\n            {code.loading ? '加载中' : <Code lang=\"ts\">{code()}</Code>}\n        </div>\n    );\n};\n"},{"path":"src/components/Collapse/Collapse.story.tsx","code":"import { For } from 'solid-js';\nimport { atom } from '@cn-ui/use';\nimport { Collapse, CollapseItem } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'accordion',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'destroyOnHide',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'lazyload',\n    },\n    {\n        type: 'select',\n        default: 'square',\n        prop: 'shape',\n        options: ['square', 'circle', 'round'].map((i) => ({ value: i })),\n    },\n];\nexport default (props) => {\n    const data = [...Array(5).keys()].map((i) => {\n        return {\n            label: '标签 ' + i,\n            name: 'tag ' + i,\n            value: atom(!!(i % 2)),\n            content: [...Array(i + 1).keys()].map((ii) => <span>{ii}</span>),\n        };\n    });\n    // 想要获取 所有标签的打开值:\n    //  data.map((i) => i.value());\n    const Value = data[0].value;\n    return (\n        <>\n            <button onclick={() => Value(!Value())}>受控标签: {Value() ? 'true' : 'false'}</button>\n            <Collapse\n                {...props}\n                onPanelChange={(...args) => {\n                    console.log(args);\n                }}\n            >\n                <For each={data}>\n                    {(item) => {\n                        return (\n                            <CollapseItem header={item.label} name={item.name} value={item.value}>\n                                {item.content}\n                                <div>43434</div>\n                                <div>43434</div>\n                                <div>43434</div>\n                                <div>43434</div>\n                                <div>43434</div>\n                            </CollapseItem>\n                        );\n                    }}\n                </For>\n            </Collapse>\n        </>\n    );\n};\n"},{"path":"src/components/CommandPalette/CommandPalette.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { onMount } from 'solid-js';\nimport '@cn-ui/command-palette/pkg-dist/style.css';\nimport { CommandPalette, PaletteRoot, Action, defineAction } from '@cn-ui/command-palette';\nimport {\n    useKeyWordsFilter,\n    Button,\n    CheckGroupController,\n    CheckGroup,\n    Image,\n    Message,\n    Space,\n} from '@cn-ui/core';\nexport const Controller = [];\n\nconst initActions = [\n    {\n        id: 'message-info',\n        title: '发出提示',\n        subtitle: 'fjiefjeijeif',\n        keywords: ['Message', 'web detection', 'another'],\n        icon: 'https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp',\n        run() {\n            Message.info('来自 Command Palette');\n        },\n    },\n    {\n        id: 'command',\n        title: '关闭',\n        subtitle: '反对反对的',\n        keywords: ['command', 'it is awesome'],\n        run() {\n            Message.info('关闭');\n        },\n    },\n];\n\nexport default (props) => {\n    const actionSource = atom<any>(initActions);\n    const actions = reflect<Action[]>(() => actionSource().map((i) => defineAction(i)));\n    const visible = atom(true);\n\n    onMount(() => {\n        // I want to add some actions after mount!\n        actionSource((i) => [\n            ...i,\n            {\n                id: 'hide',\n                title: 'Toggle Message KeyWords',\n                subtitle: 'Click Me',\n                keywords: ['Message'],\n                run() {\n                    return true;\n                },\n            },\n        ]);\n    });\n\n    // Helpful filter automatically generated by actions!\n\n    const { keywordsFilter, keywords } = useKeyWordsFilter(actions);\n    return (\n        <div>\n            <PaletteRoot\n                filters={[keywordsFilter]}\n                visibility={visible}\n                actions={actions}\n                actionsContext={{}}\n                components={{\n                    // define the Icon on the left of every\n                    ResultIcon({ action }) {\n                        return (\n                            <Image\n                                src={(action as any).icon}\n                                class=\"h-10 w-10 rounded-lg overflow-hidden mr-4\"\n                            ></Image>\n                        );\n                    },\n                    // It will add a Tag Select Bar between search box and result list\n                    Main() {\n                        return (\n                            <Space>\n                                <CheckGroupController class=\"flex-none\" data={keywords}>\n                                    All\n                                </CheckGroupController>\n                                <div class=\"flex-1 overflow-auto\">\n                                    <CheckGroup data={keywords}></CheckGroup>\n                                </div>\n                            </Space>\n                        );\n                    },\n                }}\n            >\n                <CommandPalette></CommandPalette>\n            </PaletteRoot>\n            {/* Control the reactive visible easier */}\n            <Button onClick={() => visible((i) => !i)}>{visible() ? '打开' : '关闭'}</Button>\n        </div>\n    );\n};\n"},{"path":"src/components/Explorer/Explorer.story.tsx","code":"export const Controller = [];\n\nimport { atom, reflect } from '@cn-ui/use';\nimport { createResource } from 'solid-js';\n\nimport { InputText, DefaultIcon, Message, Space, Explorer } from '@cn-ui/core';\n\nexport default () => {\n    const packageNames = atom<string>('jquery@3.2.1');\n    const [resource, { refetch }] = createResource(async () => {\n        return fetch('https://data.jsdelivr.com/v1/package/npm/' + packageNames()).then((i) =>\n            i.json()\n        );\n    });\n    const loop = (item, name, collection) => {\n        item.forEach((i) => {\n            if (i['type'] === 'directory') {\n                return loop(i.files, name + '/' + i.name, collection);\n            } else {\n                collection.push({ ...i, fullPath: name + '/' + i.name });\n            }\n        });\n        return;\n    };\n    const data = reflect(() => {\n        if (resource()) {\n            const collection = [];\n            loop(resource().files, '', collection);\n            return collection;\n        } else {\n            return [];\n        }\n    });\n    return (\n        <>\n            <h3>NPM 包文件展示 包名@版本号</h3>\n            <Space>\n                <InputText value={packageNames}></InputText>\n                <DefaultIcon name=\"check\" color=\"red\" onClick={() => refetch()}></DefaultIcon>\n            </Space>\n            <Explorer\n                Files={data}\n                onOpenFile={(file) => {\n                    Message.info(file.fullPath);\n                }}\n            ></Explorer>\n        </>\n    );\n};\n"},{"path":"src/components/Icon/Icon.story.tsx","code":"import { Icon } from '@cn-ui/core';\n\nimport IconNames from './IconNames.json';\nexport const Controller = [\n    {\n        type: 'select',\n        default: 'refresh',\n        prop: 'name',\n        options: IconNames.map((i) => ({ value: i })),\n    },\n    {\n        type: 'switch',\n        default: true,\n        prop: 'spin',\n    },\n    {\n        type: 'range',\n        default: '50px',\n        prop: 'size',\n        min: 0,\n        max: 100,\n        uint: 'px',\n    },\n];\nexport default Icon;\n"},{"path":"src/components/Image/Image.story.tsx","code":"import { Image, useViewer, Space } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'round',\n    },\n\n    {\n        type: 'select',\n        default: 'cover',\n        prop: 'fit',\n        options: ['cover', 'contain', 'fill', 'none', 'scale-down'].map((i) => ({\n            value: i,\n        })),\n    },\n    {\n        type: 'select',\n        default: 'center',\n        prop: 'position',\n        options: ['center', 'top', 'right', 'bottom', 'left'].map((i) => ({\n            value: i,\n        })),\n    },\n];\nexport default (props) => {\n    const { getViewer, addImages } = useViewer({});\n    addImages([\n        {\n            alt: '信息',\n            src: 'https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg',\n        },\n    ]);\n    return (\n        <Space vertical>\n            <Image\n                height={100}\n                width={100}\n                src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n                {...props}\n            ></Image>\n            <Image height={100} width={100} src=\"\" block {...props}></Image>\n            <h3>点击预览</h3>\n            <Image\n                height={100}\n                width={100}\n                src=\"https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg\"\n                {...props}\n                onClick={() => getViewer().show()}\n            ></Image>\n        </Space>\n    );\n};\n"},{"path":"src/components/Link/Link.story.tsx","code":"import { Icon } from '@cn-ui/core';\nimport { Link } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'disabled',\n    },\n    {\n        type: 'switch',\n        default: true,\n        prop: 'hoverable',\n    },\n\n    {\n        type: 'select',\n        default: 'default',\n        prop: 'status',\n        options: ['warning', 'danger', 'success'].map((i) => ({\n            value: i,\n        })),\n    },\n];\nexport default (props) => {\n    return (\n        <>\n            <Link {...props}>Link</Link>\n            <Link icon={true} {...props}>\n                Link\n            </Link>\n            <Link icon={<Icon name=\"yard\"></Icon>} {...props}>\n                Link\n            </Link>\n        </>\n    );\n};\n"},{"path":"src/components/Mask/Mask.story.tsx","code":"import { Image, Icon, Badge, Mask, Position } from '@cn-ui/core';\nexport const Controller = [];\nexport default (props) => {\n    const avatar = () => (\n        <Image\n            src=\"https://foruda.gitee.com/avatar/1663940152493388167/5342313_dongzhongzhidong_1663940152.png\"\n            // 使用 block 布局修复 inline 的 多余高度问题\n            block\n            height={60}\n            width={60}\n            round\n        ></Image>\n    );\n    return (\n        <>\n            <Mask {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <div\n                        class=\"bg-slate-900 text-white\"\n                        style={{\n                            'border-radius': '4px',\n                        }}\n                    >\n                        <Icon name=\"camera\"></Icon>\n                    </div>\n                </Position>\n            </Mask>\n            <Mask {...props} class=\"w-fit\">\n                {avatar()}\n                <Position full right=\"0\" bottom=\"0\">\n                    <div\n                        style={{\n                            background: '#00000099',\n                            height: '100%',\n                            color: 'white',\n                            display: 'flex',\n                            'justify-content': 'center',\n                            'align-items': 'center',\n                        }}\n                    >\n                        <Icon name=\"camera\" size={36}></Icon>\n                    </div>\n                </Position>\n            </Mask>\n            <Mask {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <Badge count=\"100\"></Badge>\n                </Position>\n            </Mask>\n            <Mask {...props} class=\"w-fit\">\n                {avatar()}\n                <Position right=\"0\" bottom=\"0\">\n                    <Badge\n                        count=\"1\"\n                        onclick={() => {\n                            console.log('点击成功');\n                        }}\n                    ></Badge>\n                </Position>\n            </Mask>\n            <Mask {...props} class=\"w-fit\">\n                {avatar()}\n                <Position top=\"0.2em\" right=\"0.2em\">\n                    <Badge dot></Badge>\n                </Position>\n            </Mask>\n        </>\n    );\n};\n"},{"path":"src/components/Message/Message.story.tsx","code":"import { Button, Message } from '@cn-ui/core';\n\n//! 必须先注册\n\nMessage.init();\nexport const Controller = [];\nexport default (props) => {\n    const Content = ['info', 'success', 'warning', 'error', 'normal', 'loading'].map((i) => {\n        return (\n            <Button\n                onClick={() => {\n                    const close = Message[i]({\n                        id: Math.random().toString(),\n                        content: '这是一条信息',\n                        closable: true,\n                        duration: 0,\n                    });\n                }}\n            >\n                {i}\n            </Button>\n        );\n    });\n    return <>{Content}</>;\n};\n"},{"path":"src/components/Space/Space.story.tsx","code":"import { Space } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'wrap',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'vertical',\n    },\n\n    {\n        type: 'select',\n        default: 'mini',\n        prop: 'size',\n        options: ['mini', 'small', 'medium', 'large'].map((i) => ({\n            value: i,\n        })),\n    },\n];\n\nimport 'animate.css/source/fading_entrances/fadeInDown.css';\nimport 'animate.css/source/fading_exits/fadeOutUp.css';\nimport { createSignal, For, onMount } from 'solid-js';\nexport default (props) => {\n    const arr = (num) => [...Array(num).keys()];\n    const [origin, setOrigin] = createSignal<number[]>([]);\n    onMount(() => {\n        // 一般而言，数据是从 remote 来的，所以渲染的时候是注入的\n        setOrigin(arr(10));\n    });\n    return (\n        <>\n            <Space {...props}>\n                {origin().map((i) => {\n                    return <div style={{ width: '3rem', 'background-color': '#eee' }}>{i}</div>;\n                })}\n            </Space>\n\n            <Space\n                {...props}\n                transition={{\n                    enterActiveClass: 'animated fadeInDown',\n                    exitActiveClass: 'animated fadeOutUp',\n                }}\n            >\n                <For each={origin()}>\n                    {(i) => {\n                        return <div style={{ width: '3rem', 'background-color': '#eee' }}>{i}</div>;\n                    }}\n                </For>\n            </Space>\n        </>\n    );\n};\n"},{"path":"src/components/Split/Split.story.tsx","code":"export const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'vertical',\n    },\n];\nimport { Split } from '@cn-ui/split';\nimport { atom } from '@cn-ui/use';\nimport { For } from 'solid-js';\nimport { Button } from '../Button';\nexport default (props) => {\n    const list = atom([...Array(2).keys()].map((i) => i));\n    return (\n        <>\n            <span>\n                <Button\n                    onClick={() => {\n                        list((i) => [...i, 1]);\n                    }}\n                >\n                    Add Number\n                </Button>\n            </span>\n            <Split\n                class=\"h-1/2 w-full bg-slate-50 \"\n                {...props}\n                minSize={0}\n                // gutterSize={5}\n                snapOffset={50}\n                expandToMin={true}\n            >\n                <For each={list()}>\n                    {(item) => {\n                        return <span>{item}</span>;\n                    }}\n                </For>\n            </Split>\n        </>\n    );\n};\n"},{"path":"src/components/Swiper/Swiper.story.tsx","code":"export const Controller = [];\n\n// 使用包内部的导出，原项目有 Bug\n// css 文件非常小，故直接导入\nimport '@cn-ui/swiper/dist/index.css';\nimport { Swiper, SwiperSlide } from '@cn-ui/swiper';\nimport { Navigation, Pagination, Scrollbar, EffectFade, Lazy } from '@cn-ui/swiper/dist/module';\n\nimport { Component, For, JSXElement } from 'solid-js';\n\nexport default () => {\n    const DemoSlide: Component<{ children: JSXElement; index: number }> = (props) => {\n        return (\n            <SwiperSlide\n                style={{\n                    height: '150px',\n                    color: 'white',\n                    'background-color': `hwb(${(props.index * 360) / 10}deg  18% 28%)`,\n                }}\n            >\n                {props.children}\n            </SwiperSlide>\n        );\n    };\n    // https://swiperjs.com/demos\n    // 更多 Demo 请参照 swiper 官网\n    return (\n        <>\n            <h3> Swiper 插件太强了，这里只是展示部分用法</h3>\n            <Swiper\n                //  声明需要使用的插件\n                modules={[Navigation, Pagination, Scrollbar]}\n                navigation={true}\n                pagination={true}\n                scrollbar={true}\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                onSlideChange={() => console.log('slide change')}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n\n            <h3> 竖直操作</h3>\n            <Swiper\n                direction={'vertical'}\n                loop\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                style={{\n                    flex: '1',\n                    height: '150px',\n                }}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n            <h3> 特效 </h3>\n            <Swiper\n                modules={[EffectFade]}\n                loop\n                effect={'fade'}\n                // 每一页之间的距离\n                spaceBetween={0}\n                // 可以看到的页数\n                slidesPerView={1}\n                style={{\n                    flex: '1',\n                    height: '150px',\n                }}\n            >\n                <For each={[...Array(10).keys()]}>\n                    {(count) => <DemoSlide index={count}>{count}</DemoSlide>}\n                </For>\n            </Swiper>\n\n            <h3> 图片懒加载</h3>\n            <Swiper\n                style={{\n                    '--swiper-navigation-color': '#fff',\n                    '--swiper-pagination-color': '#fff',\n                    height: '150px',\n                }}\n                lazy={true}\n                pagination={{\n                    clickable: true,\n                }}\n                navigation={true}\n                modules={[Lazy, Pagination, Navigation]}\n            >\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-1.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-2.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n                <SwiperSlide>\n                    <img\n                        data-src=\"https://swiperjs.com/demos/images/nature-3.jpg\"\n                        class=\"swiper-lazy\"\n                    />\n                    <div class=\"swiper-lazy-preloader swiper-lazy-preloader-white\"></div>\n                </SwiperSlide>\n            </Swiper>\n        </>\n    );\n};\n"},{"path":"src/components/Tabs/Tabs.story.tsx","code":"import { For } from 'solid-js';\nimport { Tabs, Tab, TabsHeader } from '@cn-ui/core';\nimport 'animate.css/source/fading_entrances/fadeInDown.css';\nimport 'animate.css/source/fading_exits/fadeOutUp.css';\nimport { TransitionGroup } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: true,\n        prop: 'destroyOnHide',\n    },\n];\n\nexport default (props) => {\n    const data = [...Array(5).keys()];\n    return (\n        <>\n            <Tabs>\n                <div class=\"ExtraNode\">\n                    {/* 可以自定义表头, 原始是没有表头的 */}\n                    <TabsHeader></TabsHeader>\n                    {/* 使用动画，但是动画只有在组件销毁时触发 */}\n                    {/* 可以深层嵌套使用 */}\n                    <div class=\"ExtraNode\">\n                        <TransitionGroup\n                            {...{\n                                enterActiveClass: 'animated fadeInDown',\n                                exitActiveClass: 'animated fadeOutUp',\n                            }}\n                        >\n                            <For each={data}>\n                                {(item) => {\n                                    return (\n                                        <Tab id={item.toString()} {...props}>\n                                            {item}\n                                        </Tab>\n                                    );\n                                }}\n                            </For>\n                        </TransitionGroup>\n                    </div>\n                </div>\n            </Tabs>\n        </>\n    );\n};\n"},{"path":"src/components/Tag/Tag.story.tsx","code":"import { For } from 'solid-js';\nimport { atom } from '@cn-ui/use';\nimport { Space, COLORS, Tag } from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: true,\n        prop: 'closable',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'bordered',\n    },\n    {\n        type: 'select',\n        default: 'default',\n        prop: 'color',\n        options: COLORS.map((i) => ({ value: i })),\n    },\n];\n\nimport 'animate.css/source/fading_entrances/fadeInDown.css';\nimport 'animate.css/source/fading_exits/fadeOutUp.css';\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\nexport default (props) => {\n    const data = [...Array(5).keys()].map((i) => {\n        return {\n            name: 'tag ' + i,\n            value: atom(true),\n            visible: atom(true),\n            onClose: () => {\n                return sleep(i * 100).then((res) => {\n                    console.log('触发关闭', i * 100);\n                });\n            },\n            color: COLORS[i % 10],\n        };\n    });\n    // 想要获取 所有标签的打开值:\n    //  data.map((i) => i.value());\n    const Value = data[0].value;\n\n    return (\n        <>\n            <button onclick={() => Value(!Value())}>受控标签: {Value() ? 'true' : 'false'}</button>\n            <Tag>这是一个标签</Tag>\n            <Space\n                size=\"mini\"\n                transition={{\n                    enterActiveClass: 'animated fadeInDown',\n                    exitActiveClass: 'animated fadeOutUp',\n                }}\n            >\n                {/*  必须使用 For 循环才能使用动画 */}\n                <For each={data}>\n                    {(item) => {\n                        return (\n                            <Tag\n                                color={item.color}\n                                checked={item.value}\n                                visible={item.visible}\n                                onClose={item.onClose}\n                                {...props}\n                            >\n                                {item.name}\n                            </Tag>\n                        );\n                    }}\n                </For>\n            </Space>\n        </>\n    );\n};\n"},{"path":"src/components/Trigger/Trigger.story.tsx","code":"import { Component, onCleanup, onMount } from 'solid-js';\nimport { atom } from '@cn-ui/use';\nimport { createTrigger, Button, Space } from '@cn-ui/core';\nexport const Controller = [];\n\nexport default (props) => {\n    // 注意，这个函数的环境作用域必须在这里面才行\n    const Comp: Component = () => {\n        onMount(() => {\n            console.log('初始化');\n        });\n        onCleanup(() => {\n            console.log('被清理');\n        });\n        return (\n            <Space>\n                <div>Inner1</div>\n                <div>Inner</div>\n            </Space>\n        );\n    };\n    const visible = atom(false);\n    const disabled = atom(false);\n    return (\n        <Space>\n            <Button\n                ref={createTrigger({\n                    content: <Comp></Comp>,\n                    trigger: 'mouseenter click',\n                    visible,\n                    disabled,\n                })}\n            >\n                hover\n            </Button>\n            <Button\n                onClick={() => {\n                    visible((i) => !i);\n                }}\n            >\n                {visible() ? 'showing' : 'hiding'}\n            </Button>\n            <Button\n                onClick={() => {\n                    disabled((i) => !i);\n                    console.log('点击');\n                }}\n            >\n                {disabled() ? 'disabled' : 'enable'}\n            </Button>\n        </Space>\n    );\n};\n"},{"path":"src/components/Typography/EditText.story.tsx","code":"import { Button } from '../Button';\nimport { CopyText, EllipsisText } from './EditText';\nimport { useFont } from '@cn-ui/core';\nexport const Controller = [];\nexport default (props) => {\n    return (\n        <>\n            <CopyText>这里面是可以复制的东西</CopyText>\n            <EllipsisText line={2}>\n                可展开文本。A design is a plan or specification for the construction of an object or\n                system or for the implementation of an activity or process, or the result of that\n                plan or specification in the form of a prototype, product or process. The verb to\n                design expresses the process of developing a design. The verb to design expresses\n                the process of developing a design. A design is a plan or specification for the\n                construction of an object or system or for the implementation of an activity or\n                process, or the result of that plan or specification in the form of a prototype,\n                product or process. The verb to design expresses the process of developing a design.\n                The verb to design expresses the process of developing a design.\n            </EllipsisText>\n            <Button\n                onClick={() => {\n                    const { register, loadFont } = useFont();\n                    loadFont(\n                        'https://cdn.jsdelivr.net/gh/KonghaYao/chinese-free-web-font-storage/build/江西拙楷2.0/result.css'\n                    ).then((res) => {\n                        register('jiangxizhuokai');\n                    });\n                }}\n            >\n                {' '}\n                改变字体为江西拙楷\n            </Button>\n        </>\n    );\n};\n"},{"path":"src/components/Typography/Typography.story.tsx","code":"import { Typography } from '@cn-ui/core';\nimport { Code } from '@cn-ui/highlight';\nexport const Controller = [];\nexport default (props) => {\n    return <Typography class=\"bg-white\">{Demo()}</Typography>;\n};\n\nconst code = `\n/* 标题应该更贴紧内容，并与其他块区分，margin 值要相应做优化 */\nh1,h2,h3,h4,h5,h6 {\n    line-height:1;font-family:Arial,sans-serif;margin:1.4em 0 0.8em;\n}\nh1{font-size:1.8em;}\nh2{font-size:1.6em;}\nh3{font-size:1.4em;}\nh4{font-size:1.2em;}\nh5,h6{font-size:1em;}\n\n/* 现代排版：保证块/段落之间的空白隔行 */\n.typo p, .typo pre, .typo ul, .typo ol, .typo dl, .typo form, .typo hr {\n    margin:1em 0 0.6em;\n}\n`;\n\nconst Demo = () => (\n    <>\n        <h1>\n            中文网页重设与排版：<i class=\"serif\">Typo.css</i>\n        </h1>\n\n        <h6 id=\"tagline\" class=\"serif\">\n            一致化浏览器排版效果，构建最适合中文阅读的网页排版\n        </h6>\n        <span>中文 | 排版 | 标准</span>\n\n        <hr />\n        <em>这是 UI 的排版指导文本，借鉴了 Typo.css 的格式化方式</em>\n\n        <ol id=\"table\">\n            <li>\n                <a href=\"#section1\">\n                    关于 <i class=\"serif\">Typo.css</i>\n                </a>\n            </li>\n            <li>\n                <a href=\"#section2\">排版实例</a>\n                <ul>\n                    <li>\n                        <a href=\"#section2-1\">例1：论语学而篇第一</a>\n                    </li>\n                    <li>\n                        <a href=\"#section2-2\">例2：英文排版</a>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <a href=\"#section3\">附录</a>\n                <ul>\n                    <li>\n                        <a href=\"#appendix1\">\n                            <i class=\"serif\">Typo.css</i> 排版偏重点\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"#appendix2\">开源许可</a>\n                    </li>\n                </ul>\n            </li>\n        </ol>\n\n        <h2 id=\"section1\">\n            一、关于 <i class=\"serif\">Typo.css</i>\n        </h2>\n\n        <p>\n            <i class=\"serif\">Typo.css</i>{' '}\n            的目的是，在一致化浏览器排版效果的同时，构建最适合中文阅读的网页排版。\n        </p>\n        <h4>现状和如何去做：</h4>\n\n        <p class=\"typo-first\">\n            排版是一个麻烦的问题{' '}\n            <sup>\n                <a href=\"#appendix1\"># 附录一</a>\n            </sup>\n            ，需要精心设计，而这个设计却是常被视觉设计师所忽略的。前端工程师更常看到这样的问题，但不便变更。因为在多个\n            OS\n            中的不同浏览器渲染不同，改动需要多的时间做回归测试，所以改变变得更困难。而像我们一般使用的\n            Yahoo、Eric Meyer 和 Alice base.css 中采用的 Reset 都没有很好地考虑中文排版。\n            <i class=\"serif\">Typo.css</i> 要做的就是解决中文排版的问题。\n        </p>\n\n        <p>\n            <strong>\n                <i class=\"serif\">Typo.css</i> 测试于如下平台：\n            </strong>\n        </p>\n        <table>\n            <thead>\n                <tr>\n                    <th>OS/浏览器</th>\n                    <th>Firefox</th>\n                    <th>Chrome</th>\n                    <th>Safari</th>\n                    <th>Opera</th>\n                    <th>IE9</th>\n                    <th>IE8</th>\n                    <th>IE7</th>\n                    <th>IE6</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>OS X</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>-</td>\n                    <td>-</td>\n                    <td>-</td>\n                    <td>-</td>\n                </tr>\n                <tr>\n                    <td>Win 7</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>-</td>\n                </tr>\n                <tr>\n                    <td>Win XP</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>-</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                </tr>\n                <tr>\n                    <td>Ubuntu</td>\n                    <td>✔</td>\n                    <td>✔</td>\n                    <td>-</td>\n                    <td>✔</td>\n                    <td>-</td>\n                    <td>-</td>\n                    <td>-</td>\n                    <td>-</td>\n                </tr>\n            </tbody>\n        </table>\n\n        <h4>中文排版的重点和难点</h4>\n\n        <p>\n            在中文排版中，HTML4 的很多标准在语义在都有照顾到。但从视觉效果上，却很难利用单独的 CSS\n            来实现，像<abbr title=\"在文字下多加一个点\">着重号</abbr>（例：这里\n            <em class=\"typo-em\">强调一下</em>）。在 HTML4 中，专名号标签（<code>&lt;u&gt;</code>\n            ）已经被放弃，而 HTML5 被<a href=\"//html5doctor.com/u-element/\">重新提起</a>。\n            <i class=\"serif\">Typo.css</i> 也根据实际情况提供相应的方案。我们重要要注意的两点是：\n        </p>\n        <ol>\n            <li>语义：语义对应的用法和样式是否与中文排版一致</li>\n            <li>表现：在各浏览器中的字体、大小和缩放是否如排版预期</li>\n        </ol>\n        <p>\n            对于这些，<i class=\"serif\">Typo.css</i> 排版项目的中文偏重注意点，都添加在附录中，详见：\n        </p>\n        <blockquote>\n            <b>附录一</b>：\n            <a href=\"#appendix1\">\n                <i class=\"serif\">Typo.css</i> 排版偏重点\n            </a>\n        </blockquote>\n\n        <p>\n            目前已有像百姓网等全面使用 <i class=\"serif\">Typo.css</i>{' '}\n            的项目，测试平台的覆盖，特别是在<abbr title=\"手机、平板电脑等移动平台\">移动端</abbr>\n            上还没有覆盖完主流平台，希望有能力的同学能加入测试行列，或者加入到{' '}\n            <i class=\"serif\">Typo.css</i>\n            的开发。加入方法：\n            <a href=\"https://github.com/sofish/Typo.css\">\n                参与 <i class=\"serif\">Typo.css</i> 开发\n            </a>\n            。如有批评、建议和意见，也随时欢迎给在 Github 直接提{' '}\n            <a href=\"https://github.com/sofish/Typo.css/issues\">issues</a>，或给\n            <abbr title=\"Sofish Lin, author of Typo.css\">我</abbr>发\n            <a href=\"mailto:sofish@icloud.com\">邮件</a>。\n        </p>\n\n        <h2 id=\"section2\">二、排版实例：</h2>\n\n        <p>\n            提供2个排版实例，第一个中文实例来自于来自于<cite class=\"typo-unique\">张燕婴</cite>\n            的《论语》，由于古文排版涉及到的元素比较多，所以采用《论语》中《学而》的第一篇作为排版实例介绍；第2个来自到经典的\n            Lorem Ipsum，并加入了一些代码和列表等比较具有代表性的排版元素。\n        </p>\n\n        <h3 id=\"section2-1\">例1：论语学而篇第一</h3>\n\n        <p>\n            <small>\n                <b>作者：</b>\n                <abbr title=\"名丘，字仲尼\">孔子</abbr>（<time>前551年9月28日－前479年4月11日</time>\n                ）\n            </small>\n        </p>\n\n        <h4>本篇引语</h4>\n\n        <p>\n            《学而》是《论语》第一篇的篇名。《论语》中各篇一般都是以第一章的前二三个字作为该篇的篇名。《学而》一篇包括16章，内容涉及诸多方面。其中重点是「吾日三省吾身」；「节用而爱人，使民以时」；「礼之用，和为贵」以及仁、孝、信等道德范畴。{' '}\n        </p>\n\n        <h4>原文</h4>\n\n        <p>子曰：「学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知，而不愠，不亦君子乎？」 </p>\n\n        <h4>译文</h4>\n\n        <p>\n            孔子说：「学了又时常温习和练习，不是很愉快吗？有志同道合的人从远方来，不是很令人高兴的吗？人家不了解我，我也不怨恨、恼怒，不也是一个有德的君子吗？」{' '}\n        </p>\n\n        <h4>评析</h4>\n\n        <p>\n            宋代著名学者<u class=\"typo-u\">朱熹</u>\n            对此章评价极高，说它是「入道之门，积德之基」。本章这三句话是人们非常熟悉的。历来的解释都是：学了以后，又时常温习和练习，不也高兴吗等等。三句话，一句一个意思，前后句子也没有什么连贯性。但也有人认为这样解释不符合原义，指出这里的「学」不是指学习，而是指学说或主张；「时」不能解为时常，而是时代或社会的意思，「习」不是温习，而是使用，引申为采用。而且，这三句话不是孤立的，而是前后相互连贯的。这三句的意思是：自己的学说，要是被社会采用了，那就太高兴了；退一步说，要是没有被社会所采用，可是很多朋友赞同\n            <abbr title=\"张燕婴\">我</abbr>\n            的学说，纷纷到我这里来讨论问题，我也感到快乐；再退一步说，即使社会不采用，人们也不理解我，我也不怨恨，这样做，不也就是君子吗？（见《齐鲁学刊》1986年第6期文）这种解释可以自圆其说，而且也有一定的道理，供读者在理解本章内容时参考。\n        </p>\n\n        <p>\n            此外，在对「人不知，而不愠」一句的解释中，也有人认为，「人不知」的后面没有宾语，人家不知道什么呢？当时因为孔子有说话的特定环境，他不需要说出知道什么，别人就可以理解了，却给后人留下一个谜。有人说，这一句是接上一句说的，从远方来的朋友向我求教，我告诉他，他还不懂，我却不怨恨。这样，「人不知」就是「人家不知道我所讲述的」了。这样的解释似乎有些牵强。\n        </p>\n\n        <p>\n            总之，本章提出以学习为乐事，做到人不知而不愠，反映出孔子学而不厌、诲人不倦、注重修养、严格要求自己的主张。这些思想主张在《论语》书中多处可见，有助于对第一章内容的深入了解。\n        </p>\n\n        <h3 id=\"section2-2\">例2：英文排版</h3>\n\n        <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum\n            has been the industry's standard dummy text ever since the 1500s, when an unknown\n            printer took a galley of type and scrambled it to make a type specimen book. It has\n            survived not only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s with the release of\n            Letraset sheets containing Lorem Ipsum passages, and more recently with desktop\n            publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n        </p>\n        <blockquote>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        </blockquote>\n\n        <h4>The standard Lorem Ipsum passage, used since the 1500s</h4>\n\n        <p>\n            \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n            dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\n            mollit anim id est laborum.\"\n        </p>\n\n        <h4>Section 1.10.32 of \"de Finibus Bonorum et Malorum\", written by Cicero in 45 BC</h4>\n\n        <p>\n            \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque\n            laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n            architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas\n            sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n            voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit\n            amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut\n            labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis\n            nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi\n            consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam\n            nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla\n            pariatur?\"\n        </p>\n\n        <h4>List style in action</h4>\n        <ul>\n            <li>\n                If you wish to succeed, you should use persistence as your good friend, experience\n                as your reference, prudence as your brother and hope as your sentry.\n                <p>如果你希望成功，当以恒心为良友，以经验为参谋，以谨慎为兄弟，以希望为哨兵。</p>\n            </li>\n            <li>\n                Sometimes one pays most for the things one gets for nothing.\n                <p>有时候一个人为不花钱得到的东西付出的代价最高。</p>\n            </li>\n            <li>\n                Only those who have the patience to do simple things perfectly ever acquire the\n                skill to do difficult things easily.\n                <p>只有有耐心圆满完成简单工作的人，才能够轻而易举的完成困难的事。</p>\n            </li>\n        </ul>\n\n        <h4>\n            You may want to create a perfect <code>&lt;hr /&gt;</code> line, despite the fact that\n            there will never have one\n        </h4>\n        <hr />\n        <p>\n            <abbr title=\"法国作家罗切福考尔德\">La Racheforcauld</abbr> said:\n            <mark>\n                \"Few things are impossible in themselves; and it is often for want of will, rather\n                than of means, that man fails to succeed\".\n            </mark>\n            You just need to follow the browser's behavior, and set a right <code>margin</code> to\n            it。it will works nice as the demo you're watching now. The following code is the best\n            way to render typo in Chinese:\n        </p>\n        <Code>{code}</Code>\n\n        <h3 id=\"section3\">三、附录</h3>\n\n        <h5 id=\"appendix1\">\n            1、<i class=\"serif\">Typo.css</i> 排版偏重点\n        </h5>\n        <table>\n            <thead>\n                <tr>\n                    <th>类型</th>\n                    <th>语义</th>\n                    <th>标签</th>\n                    <th>注意点</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th rowspan=\"15\">基础标签</th>\n                    <td>标题</td>\n                    <td>\n                        <code>h1</code> ～ <code>h6</code>\n                    </td>\n                    <td>\n                        全局不强制大小，<code>.typo</code>{' '}\n                        中标题与其对应的内容应紧贴，并且有相应的大小设置\n                    </td>\n                </tr>\n                <tr>\n                    <td>上、下标</td>\n                    <td>\n                        <code>sup</code>/<code>sub</code>\n                    </td>\n                    <td>保持与 MicroSoft Office Word 等程序的日常排版一致</td>\n                </tr>\n                <tr>\n                    <td>引用</td>\n                    <td>\n                        <code>blockquote</code>\n                    </td>\n                    <td>显示/嵌套样式</td>\n                </tr>\n                <tr>\n                    <td>缩写</td>\n                    <td>\n                        <code>abbr</code>\n                    </td>\n                    <td>\n                        是否都有下划线，鼠标 <code>hover</code> 是否为帮助手势\n                    </td>\n                </tr>\n                <tr>\n                    <td>分割线</td>\n                    <td>\n                        <code>hr</code>\n                    </td>\n                    <td>\n                        显示的 <code>padding</code> 和 <code>margin</code>正确\n                    </td>\n                </tr>\n                <tr>\n                    <td>列表</td>\n                    <td>\n                        <code>ul</code>/<code>ol</code>/<code>dl</code>\n                    </td>\n                    <td>\n                        在全局没有 <code>list-style</code>，在 .<code>typo</code> 中对齐正确\n                    </td>\n                </tr>\n                <tr>\n                    <td>定义列表</td>\n                    <td>\n                        <code>dl</code>\n                    </td>\n                    <td>\n                        全局 <code>padding</code> 和 <code>margin</code>为0， .<code>typo</code>{' '}\n                        中对齐正确\n                    </td>\n                </tr>\n                <tr>\n                    <td>选项</td>\n                    <td>\n                        <code>input[type=radio[, checkbox]]</code>\n                    </td>\n                    <td>\n                        与其他 <code>form</code> 元素排版时是否居中\n                    </td>\n                </tr>\n                <tr>\n                    <td>斜体</td>\n                    <td>\n                        <code>i</code>\n                    </td>\n                    <td>\n                        只设置一种斜体，让 <code>em</code> 和 <code>cite</code> 显示为正体\n                    </td>\n                </tr>\n                <tr>\n                    <td>强调</td>\n                    <td>\n                        <code>em</code>\n                    </td>\n                    <td>\n                        在全局显示正体，在 <code>.typo</code> 中显示与 <code>b</code> 和{' '}\n                        <code>strong</code> 的样式一致，为粗体\n                    </td>\n                </tr>\n                <tr>\n                    <td>加强</td>\n                    <td>\n                        <code>strong/b</code>\n                    </td>\n                    <td>显示为粗体</td>\n                </tr>\n                <tr>\n                    <td>标记</td>\n                    <td>\n                        <code>mark</code>\n                    </td>\n                    <td>类似荧光笔</td>\n                </tr>\n                <tr>\n                    <td>印刷</td>\n                    <td>\n                        <code>small</code>\n                    </td>\n                    <td>保持为正确字体的 80% 大小，颜色设置为浅灰色</td>\n                </tr>\n                <tr>\n                    <td>表格</td>\n                    <td>\n                        <code>table</code>\n                    </td>\n                    <td>\n                        全局不显示线条，在 <code>table</code> 中显示表格外框，并且表头有浅灰背景\n                    </td>\n                </tr>\n                <tr>\n                    <td>代码</td>\n                    <td>\n                        <code>pre</code>/<code>code</code>\n                    </td>\n                    <td>\n                        字体使用 <code>courier</code> 系字体，保持与 <code>serif</code>{' '}\n                        有比较一致的显示效果\n                    </td>\n                </tr>\n                <tr>\n                    <th rowspan=\"5\">特殊符号</th>\n                    <td>着重号</td>\n                    <td>\n                        <em class=\"typo-em\">在文字下加点</em>\n                    </td>\n                    <td>\n                        在支持 <code>:after</code> 和 <code>:before</code>{' '}\n                        的浏览器可以做渐进增强实现\n                    </td>\n                </tr>\n                <tr>\n                    <td>专名号</td>\n                    <td>\n                        <u>林建锋</u>\n                    </td>\n                    <td>\n                        专名号，有下划线，使用 <code>u</code> 或都 <code>.typo-u</code> 类\n                    </td>\n                </tr>\n                <tr>\n                    <td>破折号</td>\n                    <td>——</td>\n                    <td>保持一划，而非两划</td>\n                </tr>\n                <tr>\n                    <td>人民币</td>\n                    <td>&yen;</td>\n                    <td>\n                        使用两平等线的符号，或者 HTML 实体符号 <code>&amp;yen;</code>\n                    </td>\n                </tr>\n                <tr>\n                    <td>删除符</td>\n                    <td>\n                        <del>已删除（deleted）</del>\n                    </td>\n                    <td>一致化各浏览器显示，中英混排正确</td>\n                </tr>\n                <tr>\n                    <th rowspan=\"3\">加强类</th>\n                    <td>专名号</td>\n                    <td>\n                        <code>.typo-u</code>\n                    </td>\n                    <td>\n                        由于 <code>u</code> 被 HTML4 放弃，在向后兼容上推荐使用 <code>.typo-u</code>\n                    </td>\n                </tr>\n                <tr>\n                    <td>着重符</td>\n                    <td>\n                        <code>.typo-em</code>\n                    </td>\n                    <td>\n                        利用 <code>:after</code> 和 <code>:before</code> 实现着重符\n                    </td>\n                </tr>\n                <tr>\n                    <td>清除浮动</td>\n                    <td>\n                        <code>.clearfix</code>\n                    </td>\n                    <td>与一般 CSS Reset 保持一对致 API</td>\n                </tr>\n                <tr>\n                    <th rowspan=\"5\">注意点</th>\n                    <td colspan=\"3\">（1）中英文混排行高/行距</td>\n                </tr>\n                <tr>\n                    <td colspan=\"3\">（2）上下标在 IE 中显示效果</td>\n                </tr>\n                <tr>\n                    <td colspan=\"3\">（3）块/段落分割空白是否符合设计原则</td>\n                </tr>\n                <tr>\n                    <td colspan=\"3\">（4）input 多余空间问题</td>\n                </tr>\n                <tr>\n                    <td colspan=\"3\">\n                        （5）默认字体色彩，目前采用 <code>#333</code> 在各种浏览显示比较好\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <h5 id=\"appendix2\">2、开源许可</h5>\n\n        <p>\n            <i class=\"serif\">Typo.css</i> 基于{' '}\n            <a href=\"//zh.wikipedia.org/wiki/MIT_License\">MIT License</a>{' '}\n            开源，使用代码只需说明来源，或者引用{' '}\n            <a href=\"//typo.sofi.sh/license.txt\">license.txt</a> 即可。\n        </p>\n    </>\n);\n"},{"path":"src/components/Uploader/Uploader.story.tsx","code":"export const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'mockUpload',\n        description: '非属性，为测试的一个效果',\n    },\n];\n\nimport { atom, reflect } from '@cn-ui/use';\nimport { UploadPanel, Space, SimpleUploader, UploaderRoot, UploadList, ExFile } from '@cn-ui/core';\n\nconst fakeUpload = async (notify, files, onCancel) => {\n    await new Promise((resolve) => {\n        let count = 0;\n        const close = setInterval(() => {\n            count++;\n            notify(count * 10);\n            console.log(count);\n            if (count === 10) {\n                clearInterval(close);\n                resolve(null);\n            }\n        }, 100);\n        onCancel(() => {\n            clearInterval(close);\n        });\n    });\n    return true;\n};\nimport { Upload } from 'upload-js';\nconst upload = Upload({ apiKey: 'free' });\nconst mockUpload = async (notify, files: ExFile[], onCancel) => {\n    const data = await Promise.all(\n        files.map(async (i) => {\n            const { fileUrl } = await upload.uploadFile(i, {\n                onBegin: ({ cancel }) => {\n                    // 注意，upload-js 的 cancel 本身失效\n                    onCancel(() => {\n                        cancel();\n                    });\n                },\n                onProgress: ({ progress }) => notify(progress, i.sha),\n            });\n            return fileUrl;\n        })\n    );\n    console.log(data);\n    return true;\n};\n\nexport default (props) => {\n    const Files = atom([]);\n    return (\n        <UploaderRoot Files={Files} uploading={props.mockUpload ? mockUpload : fakeUpload}>\n            <Space vertical class=\"w-full\">\n                <SimpleUploader></SimpleUploader>\n                <UploadList class=\"w-full\"></UploadList>\n            </Space>\n            <UploadPanel></UploadPanel>\n        </UploaderRoot>\n    );\n};\n"},{"path":"src/components/Form/CheckBox/CheckBox.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport {\n    CheckGroupController,\n    useCheckGroup,\n    Message,\n    Space,\n    CheckBox,\n    CheckGroup,\n    Button,\n} from '@cn-ui/core';\nexport const Controller = [\n    {\n        type: 'switch',\n        default: false,\n        prop: 'disabled',\n    },\n    {\n        type: 'switch',\n        default: false,\n        prop: 'indeterminate',\n    },\n];\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\nexport default (props) => {\n    const checkbox = atom(true);\n    const groupController = ['用户', '姓名', '操作'].map((i) => {\n        return { value: atom(false), disabled: props.disabled, children: i };\n    });\n    const { inverse } = useCheckGroup(groupController);\n    return (\n        <>\n            <Space vertical>\n                <CheckBox value={checkbox} {...props}>\n                    同步更新\n                </CheckBox>\n                <CheckBox\n                    value={checkbox}\n                    onValueInput={async () => {\n                        console.log('请等待 1000s');\n                        const c = Message.loading('加载中');\n                        await sleep(1000);\n                        c();\n                        Message.success('成功');\n                        return true;\n                    }}\n                >\n                    异步更新{checkbox() ? '选中' : '没选中'}\n                </CheckBox>\n            </Space>\n\n            <Space>\n                <CheckGroupController data={groupController}></CheckGroupController>\n                <Button onClick={inverse} size=\"mini\">\n                    反选\n                </Button>\n            </Space>\n            <CheckGroup data={groupController}></CheckGroup>\n            <h3>单选框</h3>\n            <CheckGroup data={groupController} maxCheck={1}></CheckGroup>\n            <h3>二选框</h3>\n            <CheckGroup\n                data={groupController}\n                maxCheck={2}\n                onOverCheck={() => {\n                    Message.info('先关闭它吧');\n                }}\n            ></CheckGroup>\n        </>\n    );\n};\n"},{"path":"src/components/Form/InputNumber/InputNumber.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\n\nimport { InputNumber, Slider } from '@cn-ui/core';\nexport default (props) => {\n    const val = atom(4);\n    return (\n        <div>\n            <InputNumber {...props}></InputNumber>\n            <InputNumber {...props} button step={4} value={val}></InputNumber>\n            <InputNumber {...props} button min={0} max={10} step={2} value={val}></InputNumber>\n            {val()}\n            <Slider {...props} min={0} max={10} step={2} value={val}></Slider>\n        </div>\n    );\n};\n"},{"path":"src/components/Form/Password/Password.story.tsx","code":"export const Controller = [\n    { type: 'switch', default: false, prop: 'disabled' },\n    { type: 'switch', default: true, prop: 'score' },\n];\nconst sleep = (ms) =>\n    new Promise((resolve) => {\n        setTimeout(() => resolve(null), ms);\n    });\nimport { Password } from '@cn-ui/core';\nexport default (props) => {\n    return (\n        <div>\n            <Password {...props}></Password>\n        </div>\n    );\n};\n"},{"path":"src/components/Form/Select/Select.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { Select, InputColor, Rate } from '@cn-ui/core';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\n\nexport default (props) => {\n    const val = atom('');\n    const options = atom(\n        [...Array(10).keys()].flatMap((i) => [\n            'Beijing',\n            'Shanghai',\n            'Guangzhou',\n            'Disabled',\n            '343'.repeat(10),\n            '232312',\n            '323232',\n        ])\n    );\n    const color = atom('');\n    const rate = atom(0);\n    return (\n        <div>\n            <Select {...props} value={val} options={options}></Select>\n            <InputColor {...props} value={color}></InputColor>\n            <Rate {...props} value={rate}></Rate>\n            <Rate {...props} value={rate} allowHalf></Rate>\n        </div>\n    );\n};\n"},{"path":"src/components/Form/Switch/Switch.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\n\nexport const Controller = [{ type: 'switch', default: false, prop: 'disabled' }];\nconst sleep = (ms: number) =>\n    new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(null);\n        }, ms);\n    });\nimport { Switch } from '@cn-ui/core';\nexport default (props) => {\n    const val = atom(false);\n    return (\n        <div>\n            <Switch {...props} value={val} onClick={async () => sleep(1000)}></Switch>\n            <Switch value={val}></Switch>\n        </div>\n    );\n};\n"},{"path":"src/components/Form/Text/Text.story.tsx","code":"import { atom, reflect } from '@cn-ui/use';\nimport { InputText, Button, Icon } from '@cn-ui/core';\n\nexport const Controller = [\n    { type: 'switch', default: false, prop: 'disabled' },\n    { type: 'switch', default: true, prop: 'showWordLimit' },\n    { type: 'switch', default: true, prop: 'allowClear' },\n];\nexport default (props) => {\n    const val = atom('');\n    return (\n        <div>\n            <InputText {...props}></InputText>\n            <InputText {...props} maxLength={10} value={val}></InputText>\n            <InputText\n                {...props}\n                value={val}\n                allowClear={false}\n                icon={'https://'}\n                showWordLimit={false}\n            >\n                <Button size=\"mini\" type=\"primary\">\n                    <Icon name=\"search\"></Icon>\n                </Button>\n            </InputText>\n        </div>\n    );\n};\n"}]